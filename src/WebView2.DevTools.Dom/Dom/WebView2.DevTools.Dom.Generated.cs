#nullable enable
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebView2.DevTools.Dom
{
    using System;
    using System.Threading.Tasks;
    
    
    /// <summary>Html Constants</summary>
    public partial class HtmlObjectFactory
    {
        
        /// <summary>CreateObject</summary>
        static object? CreateObjectInternal(string className, ExecutionContext executionContext, Microsoft.Web.WebView2.Core.DevToolsProtocolExtension.DevToolsProtocolHelper client, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, Microsoft.Web.WebView2.Core.DevToolsProtocolExtension.Runtime.RemoteObject remoteObject, WebView2DevToolsContext devToolsContext, FrameManager frameManager)
        {
            if ((className == "Range"))
            {
                return new Range(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "Document"))
            {
                return new Document(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "Node"))
            {
                return new Node(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "StyleSheet"))
            {
                return new StyleSheet(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "Element"))
            {
                return new Element(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "Attr"))
            {
                return new Attr(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "NamedNodeMap"))
            {
                return new NamedNodeMap(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "DOMTokenList"))
            {
                return new TokenList(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "DOMStringMap"))
            {
                return new StringMap(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "DOMSettableTokenList"))
            {
                return new SettableTokenList(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "Text"))
            {
                return new Text(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "CharacterData"))
            {
                return new CharacterData(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "Window"))
            {
                return new Window(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "Location"))
            {
                return new Location(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "History"))
            {
                return new History(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "Navigator"))
            {
                return new Navigator(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "URLUtils"))
            {
                return new UrlUtilities(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "NavigatorID"))
            {
                return new NavigatorId(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLAnchorElement"))
            {
                return new HtmlAnchorElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLAreaElement"))
            {
                return new HtmlAreaElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLBaseElement"))
            {
                return new HtmlBaseElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLBodyElement"))
            {
                return new HtmlBodyElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLBRElement"))
            {
                return new HtmlBreakRowElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLButtonElement"))
            {
                return new HtmlButtonElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLCommandElement"))
            {
                return new HtmlCommandElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLDataElement"))
            {
                return new HtmlDataElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLDataListElement"))
            {
                return new HtmlDataListElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLDetailsElement"))
            {
                return new HtmlDetailsElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLDialogElement"))
            {
                return new HtmlDialogElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLDivElement"))
            {
                return new HtmlDivElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLDocument"))
            {
                return new HtmlDocument(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLElement"))
            {
                return new HtmlElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLEmbedElement"))
            {
                return new HtmlEmbedElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLFieldSetElement"))
            {
                return new HtmlFieldSetElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLFormControlsCollection"))
            {
                return new HtmlFormControlsCollection(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLFormElement"))
            {
                return new HtmlFormElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLHeadElement"))
            {
                return new HtmlHeadElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLHeadingElement"))
            {
                return new HtmlHeadingElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLHRElement"))
            {
                return new HtmlHrElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLHtmlElement"))
            {
                return new HtmlHtmlElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLImageElement"))
            {
                return new HtmlImageElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLIFrameElement"))
            {
                return new HtmlInlineFrameElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLInputElement"))
            {
                return new HtmlInputElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLKeygenElement"))
            {
                return new HtmlKeygenElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLLabelElement"))
            {
                return new HtmlLabelElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLLegendElement"))
            {
                return new HtmlLegendElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLLinkElement"))
            {
                return new HtmlLinkElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLLIElement"))
            {
                return new HtmlListItemElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLMapElement"))
            {
                return new HtmlMapElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLMarqueeElement"))
            {
                return new HtmlMarqueeElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLMenuElement"))
            {
                return new HtmlMenuElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLMenuItemElement"))
            {
                return new HtmlMenuItemElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLMetaElement"))
            {
                return new HtmlMetaElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLMeterElement"))
            {
                return new HtmlMeterElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLModElement"))
            {
                return new HtmlModElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLObjectElement"))
            {
                return new HtmlObjectElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLOptionElement"))
            {
                return new HtmlOptionElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLOptionsCollection"))
            {
                return new HtmlOptionsCollection(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLOptGroupElement"))
            {
                return new HtmlOptionsGroupElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLOListElement"))
            {
                return new HtmlOrderedListElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLOutputElement"))
            {
                return new HtmlOutputElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLParagraphElement"))
            {
                return new HtmlParagraphElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLParamElement"))
            {
                return new HtmlParamElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLPictureElement"))
            {
                return new HtmlPictureElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLPreElement"))
            {
                return new HtmlPreElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLProgressElement"))
            {
                return new HtmlProgressElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLQuoteElement"))
            {
                return new HtmlQuoteElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLScriptElement"))
            {
                return new HtmlScriptElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLSelectElement"))
            {
                return new HtmlSelectElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLSourceElement"))
            {
                return new HtmlSourceElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLSpanElement"))
            {
                return new HtmlSpanElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLStyleElement"))
            {
                return new HtmlStyleElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLTableCaptionElement"))
            {
                return new HtmlTableCaptionElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLTableCellElement"))
            {
                return new HtmlTableCellElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLTableColElement"))
            {
                return new HtmlTableColumnElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLTableDataCellElement"))
            {
                return new HtmlTableDataCellElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLTableElement"))
            {
                return new HtmlTableElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLTableRowElement"))
            {
                return new HtmlTableRowElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLTableSectionElement"))
            {
                return new HtmlTableSectionElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLTemplateElement"))
            {
                return new HtmlTemplateElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLTextAreaElement"))
            {
                return new HtmlTextAreaElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLTimeElement"))
            {
                return new HtmlTimeElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLTitleElement"))
            {
                return new HtmlTitleElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLUnknownElement"))
            {
                return new HtmlUnknownElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "HTMLUListElement"))
            {
                return new HtmlUnorderedListElement(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "ValidityState"))
            {
                return new ValidityState(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "MediaList"))
            {
                return new MediaList(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "StyleSheetList"))
            {
                return new StyleSheetList(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "DOMStringList"))
            {
                return new StringList(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            if ((className == "DocumentType"))
            {
                return new DocumentType(executionContext, client, loggerFactory, remoteObject, devToolsContext, frameManager);
            }
            return null;
        }
    }
    
    ///  <summary>
    ///  The Range interface represents a fragment of a document that can
    ///  contain nodes and parts of text nodes in a given document.
    ///  </summary>
    public partial class Range : RemoteHandle
    {
        
        ///  <summary>
        ///  Selects the start of the given range by using the given reference
        ///  node and a relative offset.
        ///  </summary>
        ///  <param name="refNode">The reference node to use.</param>
        ///  <param name="offset">
        ///  The offset relative to the reference node.
        ///  </param>
        public virtual System.Threading.Tasks.Task SetStartAsync(Node refNode, Int32 offset)
        {
            return this.EvaluateFunctionInternalAsync("(element, refNode, offset) => { return element.setStart(refNode, offset); }", refNode, offset);
        }
        
        ///  <summary>
        ///  Selects the end of the given range by using the given reference
        ///  node and a relative offset.
        ///  </summary>
        ///  <param name="refNode">The reference node to use.</param>
        ///  <param name="offset">
        ///  The offset relative to the reference node.
        ///  </param>
        public virtual System.Threading.Tasks.Task SetEndAsync(Node refNode, Int32 offset)
        {
            return this.EvaluateFunctionInternalAsync("(element, refNode, offset) => { return element.setEnd(refNode, offset); }", refNode, offset);
        }
        
        ///  <summary>
        ///  Selects the start of the given range by using an inclusive
        ///  reference node.
        ///  </summary>
        ///  <param name="refNode">The reference node to use.</param>
        public virtual System.Threading.Tasks.Task SetStartBeforeAsync(Node refNode)
        {
            return this.EvaluateFunctionInternalAsync("(element, refNode) => { return element.setStartBefore(refNode); }", refNode);
        }
        
        ///  <summary>
        ///  Selects the end of the given range by using an inclusive reference
        ///  node.
        ///  </summary>
        ///  <param name="refNode">The reference node to use.</param>
        public virtual System.Threading.Tasks.Task SetEndBeforeAsync(Node refNode)
        {
            return this.EvaluateFunctionInternalAsync("(element, refNode) => { return element.setEndBefore(refNode); }", refNode);
        }
        
        ///  <summary>
        ///  Selects the start of the given range by using an exclusive
        ///  reference node.
        ///  </summary>
        ///  <param name="refNode">The reference node to use.</param>
        public virtual System.Threading.Tasks.Task SetStartAfterAsync(Node refNode)
        {
            return this.EvaluateFunctionInternalAsync("(element, refNode) => { return element.setStartAfter(refNode); }", refNode);
        }
        
        ///  <summary>
        ///  Selects the end of the given range by using an exclusive reference
        ///  node.
        ///  </summary>
        ///  <param name="refNode">The referenced node.</param>
        public virtual System.Threading.Tasks.Task SetEndAfterAsync(Node refNode)
        {
            return this.EvaluateFunctionInternalAsync("(element, refNode) => { return element.setEndAfter(refNode); }", refNode);
        }
        
        ///  <summary>
        ///  Collapses the range to a single level.
        ///  </summary>
        ///  <param name="toStart">
        ///  Determines if only the first level should be selected.
        ///  </param>
        public virtual System.Threading.Tasks.Task CollapseAsync(Boolean toStart)
        {
            return this.EvaluateFunctionInternalAsync("(element, toStart) => { return element.collapse(toStart); }", toStart);
        }
        
        ///  <summary>
        ///  Selects the contained node.
        ///  </summary>
        ///  <param name="refNode">The node to use.</param>
        public virtual System.Threading.Tasks.Task SelectNodeAsync(Node refNode)
        {
            return this.EvaluateFunctionInternalAsync("(element, refNode) => { return element.selectNode(refNode); }", refNode);
        }
        
        ///  <summary>
        ///  Selects the contained nodes by taking a reference node as origin.
        ///  </summary>
        ///  <param name="refNode">The reference node.</param>
        public virtual System.Threading.Tasks.Task SelectNodeContentsAsync(Node refNode)
        {
            return this.EvaluateFunctionInternalAsync("(element, refNode) => { return element.selectNodeContents(refNode); }", refNode);
        }
        
        ///  <summary>
        ///  Clears the contained nodes.
        ///  </summary>
        public virtual System.Threading.Tasks.Task DeleteContentsAsync()
        {
            return this.EvaluateFunctionInternalAsync("(element) => { return element.deleteContents(); }");
        }
        
        ///  <summary>
        ///  Clears the node representation and returns a document fragment with
        ///  the originally contained nodes.
        ///  </summary>
        ///  <returns>The document fragment containing the nodes.</returns>
        public virtual System.Threading.Tasks.Task<DocumentFragment> ExtractContentsAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<DocumentFragment>("(element) => { return element.extractContents(); }");
        }
        
        ///  <summary>
        ///  Creates a document fragement of the contained nodes.
        ///  </summary>
        ///  <returns>The created document fragment.</returns>
        public virtual System.Threading.Tasks.Task<DocumentFragment> CloneContentsAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<DocumentFragment>("(element) => { return element.cloneContents(); }");
        }
        
        ///  <summary>
        ///  Inserts a node into the range.
        ///  </summary>
        ///  <param name="node">The node to include.</param>
        public virtual System.Threading.Tasks.Task InsertNodeAsync(Node node)
        {
            return this.EvaluateFunctionInternalAsync("(element, node) => { return element.insertNode(node); }", node);
        }
        
        ///  <summary>
        ///  Includes the given node with its siblings in the range.
        ///  </summary>
        ///  <param name="newParent">The range to surround.</param>
        public virtual System.Threading.Tasks.Task SurroundContentsAsync(Node newParent)
        {
            return this.EvaluateFunctionInternalAsync("(element, newParent) => { return element.surroundContents(newParent); }", newParent);
        }
        
        ///  <summary>
        ///  Creates a copy of this range.
        ///  </summary>
        ///  <returns>The copy representing the same range.</returns>
        public virtual System.Threading.Tasks.Task<Range> CloneRangeAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<Range>("(element) => { return element.cloneRange(); }");
        }
        
        ///  <summary>
        ///  Detaches the range from the DOM tree.
        ///  </summary>
        public virtual System.Threading.Tasks.Task DetachAsync()
        {
            return this.EvaluateFunctionInternalAsync("(element) => { return element.detach(); }");
        }
        
        ///  <summary>
        ///  Checks if the given node is within this range by using a offset.
        ///  </summary>
        ///  <param name="node">The node to check for.</param>
        ///  <param name="offset">The offset to use.</param>
        ///  <returns>
        ///  True if the point is within the range, otherwise false.
        ///  </returns>
        public virtual System.Threading.Tasks.Task<Boolean> IsPointInRangeAsync(Node node, Int32 offset)
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element, node, offset) => { return element.isPointInRange(node, offset); }", node, offset);
        }
        
        ///  <summary>
        ///  Compares the boundary points of the range.
        ///  </summary>
        ///  <param name="how">
        ///  Determines how these points should be compared.
        ///  </param>
        ///  <param name="sourceRange">
        ///  The range of the other boundary points.
        ///  </param>
        ///  <returns>A relative position.</returns>
        public virtual System.Threading.Tasks.Task<RangePosition> CompareBoundaryPointsAsync(RangeType how, Range sourceRange)
        {
            return this.EvaluateFunctionInternalAsync<RangePosition>("(element, how, sourceRange) => { return element.compareBoundaryPoints(how, source" +
                    "Range); }", how, sourceRange);
        }
        
        ///  <summary>
        ///  Compares the node to the given offset and returns the relative
        ///  position.
        ///  </summary>
        ///  <param name="node">The node to use.</param>
        ///  <param name="offset">The offset to use.</param>
        ///  <returns>The relative position in the range.</returns>
        public virtual System.Threading.Tasks.Task<RangePosition> ComparePointAsync(Node node, Int32 offset)
        {
            return this.EvaluateFunctionInternalAsync<RangePosition>("(element, node, offset) => { return element.comparePoint(node, offset); }", node, offset);
        }
        
        ///  <summary>
        ///  Checks if the given node is contained in this range.
        ///  </summary>
        ///  <param name="node">The node to check for.</param>
        ///  <returns>
        ///  True if the node is within the range, otherwise false.
        ///  </returns>
        public virtual System.Threading.Tasks.Task<Boolean> IntersectsNodeAsync(Node node)
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element, node) => { return element.intersectsNode(node); }", node);
        }
        
        ///  <summary>
        ///  Gets the node that starts the container.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Node> GetHeadAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<Node>("(element) => { return element.startContainer; }");
        }
        
        ///  <summary>
        ///  Gets the offset of the StartContainer in the document.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Int32> GetStartAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32>("(element) => { return element.startOffset; }");
        }
        
        ///  <summary>
        ///  Gets the node that ends the container.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Node> GetTailAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<Node>("(element) => { return element.endContainer; }");
        }
        
        ///  <summary>
        ///  Gets the offset of the EndContainer in the document.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Int32> GetEndAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32>("(element) => { return element.endOffset; }");
        }
        
        ///  <summary>
        ///  Gets a value that indicates if the representation is collapsed.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetIsCollapsedAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.collapsed; }");
        }
        
        ///  <summary>
        ///  Gets the common ancestor node of the contained range.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Node> GetCommonAncestorAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<Node>("(element) => { return element.commonAncestorContainer; }");
        }
    }
    
    ///  <summary>
    ///  The Document interface serves as an entry point to the web page's
    ///  content.
    ///  </summary>
    public partial class Document : Node
    {
        
        ///  <summary>
        ///  Causes the Document to be replaced in-place, as if it was a new
        ///  Document object, but reusing the previous object, which is then
        ///  returned.
        ///  </summary>
        ///  <param name="type">The new content type.</param>
        ///  <param name="replace">
        ///  Special annotation to replace the history.
        ///  </param>
        public virtual System.Threading.Tasks.Task<Document> OpenAsync(String type, String replace)
        {
            return this.EvaluateFunctionHandleInternalAsync<Document>("(element, type, replace) => { return element.open(type, replace); }", type, replace);
        }
        
        ///  <summary>
        ///  Finishes writing to a document.
        ///  </summary>
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return this.EvaluateFunctionInternalAsync("(element) => { return element.close(); }");
        }
        
        ///  <summary>
        ///  Writes text to a document.
        ///  </summary>
        ///  <param name="content">
        ///  The text to be written on the document.
        ///  </param>
        public virtual System.Threading.Tasks.Task WriteAsync(String content)
        {
            return this.EvaluateFunctionInternalAsync("(element, content) => { return element.write(content); }", content);
        }
        
        ///  <summary>
        ///  Writes a line of text to a document.
        ///  </summary>
        ///  <param name="content">
        ///  The text to be written on the document.
        ///  </param>
        public virtual System.Threading.Tasks.Task WritelnAsync(String content)
        {
            return this.EvaluateFunctionInternalAsync("(element, content) => { return element.writeln(content); }", content);
        }
        
        ///  <summary>
        ///  Loads the document content from the given url.
        ///  </summary>
        ///  <param name="url">The url that hosts the content.</param>
        public virtual System.Threading.Tasks.Task LoadAsync(String url)
        {
            return this.EvaluateFunctionInternalAsync("(element, url) => { return element.load(url); }", url);
        }
        
        ///  <summary>
        ///  Returns a list of elements with a given name in the HTML document.
        ///  </summary>
        ///  <param name="name">
        ///  The value of the name attribute of the element.
        ///  </param>
        ///  <returns>A collection of HTML elements.</returns>
        public virtual System.Threading.Tasks.Task<HtmlCollection<Element>> GetElementsByNameAsync(String name)
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlCollection<Element>>("(element, name) => { return element.getElementsByName(name); }", name);
        }
        
        ///  <summary>
        ///  Returns a set of elements which have all the given class names.
        ///  </summary>
        ///  <param name="classNames">
        ///  A string representing the list of class names to match; class names
        ///  are separated by whitespace.
        ///  </param>
        ///  <returns>A collection of elements.</returns>
        public virtual System.Threading.Tasks.Task<HtmlCollection<Element>> GetElementsByClassNameAsync(String classNames)
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlCollection<Element>>("(element, classNames) => { return element.getElementsByClassName(classNames); }", classNames);
        }
        
        ///  <summary>
        ///  Returns a NodeList of elements with the given tag name. The
        ///  complete document is searched, including the root node.
        ///  </summary>
        ///  <param name="tagName">
        ///  A string representing the name of the elements. The special string
        ///  "*" represents all elements.
        ///  </param>
        ///  <returns>
        ///  A collection of elements in the order they appear in the tree.
        ///  </returns>
        public virtual System.Threading.Tasks.Task<HtmlCollection<Element>> GetElementsByTagNameAsync(String tagName)
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlCollection<Element>>("(element, tagName) => { return element.getElementsByTagName(tagName); }", tagName);
        }
        
        ///  <summary>
        ///  Returns a list of elements with the given tag name belonging to the
        ///  given namespace. The complete document is searched, including the
        ///  root node.
        ///  </summary>
        ///  <param name="namespaceUri">
        ///  The namespace URI of elements to look for.
        ///  </param>
        ///  <param name="tagName">
        ///  Either the local name of elements to look for or the special value
        ///  "*", which matches all elements.
        ///  </param>
        ///  <returns>
        ///  A collection of elements in the order they appear in the tree.
        ///  </returns>
        public virtual System.Threading.Tasks.Task<HtmlCollection<Element>> GetElementsByTagNameNSAsync(String namespaceUri, String tagName)
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlCollection<Element>>("(element, namespaceUri, tagName) => { return element.getElementsByTagNameNS(names" +
                    "paceUri, tagName); }", namespaceUri, tagName);
        }
        
        ///  <summary>
        ///  Creates a new Range object.
        ///  </summary>
        ///  <returns>The range.</returns>
        public virtual System.Threading.Tasks.Task<Range> CreateRangeAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<Range>("(element) => { return element.createRange(); }");
        }
        
        ///  <summary>
        ///  Creates an empty DocumentFragment object.
        ///  </summary>
        ///  <returns>The new document fragment.</returns>
        public virtual System.Threading.Tasks.Task<DocumentFragment> CreateDocumentFragmentAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<DocumentFragment>("(element) => { return element.createDocumentFragment(); }");
        }
        
        ///  <summary>
        ///  Creates a new element with the given tag name.
        ///  </summary>
        ///  <param name="name">
        ///  A string that specifies the type of element to be created.
        ///  </param>
        ///  <returns>The created element object.</returns>
        public virtual System.Threading.Tasks.Task<Element> CreateElementAsync(String name)
        {
            return this.EvaluateFunctionHandleInternalAsync<Element>("(element, name) => { return element.createElement(name); }", name);
        }
        
        ///  <summary>
        ///  Creates a new element with the given tag name and namespace URI.
        ///  </summary>
        ///  <param name="namespaceUri">
        ///  Specifies the namespace URI to associate with the element.
        ///  </param>
        ///  <param name="name">
        ///  A string that specifies the type of element to be created.
        ///  </param>
        ///  <returns>The created element.</returns>
        public virtual System.Threading.Tasks.Task<Element> CreateElementNSAsync(String namespaceUri, String name)
        {
            return this.EvaluateFunctionHandleInternalAsync<Element>("(element, namespaceUri, name) => { return element.createElementNS(namespaceUri, n" +
                    "ame); }", namespaceUri, name);
        }
        
        ///  <summary>
        ///  Creates an Attr of the given name.
        ///  </summary>
        ///  <param name="name">
        ///  The name of the attribute.
        ///  </param>
        ///  <returns>
        ///  A new Attr object with the nodeName attribute set to name, and
        ///  localName, prefix, and namespaceURI set to null. The value of the
        ///  attribute is the empty string.
        ///  </returns>
        public virtual System.Threading.Tasks.Task<Attr> CreateAttributeAsync(String name)
        {
            return this.EvaluateFunctionHandleInternalAsync<Attr>("(element, name) => { return element.createAttribute(name); }", name);
        }
        
        ///  <summary>
        ///  Creates an attribute of the given qualified name and namespace URI.
        ///  </summary>
        ///  <param name="namespaceUri">
        ///  The namespace URI of the attribute to create.
        ///  </param>
        ///  <param name="name">
        ///  The qualified name of the attribute to instantiate.
        ///  </param>
        ///  <returns>A new Attr object.</returns>
        public virtual System.Threading.Tasks.Task<Attr> CreateAttributeNSAsync(String namespaceUri, String name)
        {
            return this.EvaluateFunctionHandleInternalAsync<Attr>("(element, namespaceUri, name) => { return element.createAttributeNS(namespaceUri," +
                    " name); }", namespaceUri, name);
        }
        
        ///  <summary>
        ///  Creates a new text node and returns it.
        ///  </summary>
        ///  <param name="data">
        ///  A string containing the data to be put in the text node.
        ///  </param>
        ///  <returns>The created text node.</returns>
        public virtual System.Threading.Tasks.Task<Text> CreateTextNodeAsync(String data)
        {
            return this.EvaluateFunctionHandleInternalAsync<Text>("(element, data) => { return element.createTextNode(data); }", data);
        }
        
        ///  <summary>
        ///  Creates a copy of a node from an external document that can be
        ///  inserted into the current document.
        ///  </summary>
        ///  <param name="externalNode">
        ///  The node from another document to be imported.
        ///  </param>
        ///  <param name="deep">
        ///  Optional argument, indicating whether the descendants of the
        ///  imported node need to be imported.
        ///  </param>
        ///  <returns>
        ///  The new node that is imported into the document. The new node's
        ///  parentNode is null, since it has not yet been inserted into the
        ///  document tree.
        ///  </returns>
        public virtual System.Threading.Tasks.Task<Node> ImportNodeAsync(Node externalNode, Boolean deep)
        {
            return this.EvaluateFunctionHandleInternalAsync<Node>("(element, externalNode, deep) => { return element.importNode(externalNode, deep);" +
                    " }", externalNode, deep);
        }
        
        ///  <summary>
        ///  Adopts a node from an external document. The node and its subtree
        ///  is removed from the document it's in (if any), and its
        ///  ownerDocument is changed to the current document. The node can then
        ///  be inserted into the current document. The new node's parentNode is
        ///  null, since it has not yet been inserted into the document tree.
        ///  </summary>
        ///  <param name="externalNode">
        ///  The node from another document to be adopted.
        ///  </param>
        ///  <returns>
        ///  The adopted node that can be used in the current document.
        ///  </returns>
        public virtual System.Threading.Tasks.Task<Node> AdoptNodeAsync(Node externalNode)
        {
            return this.EvaluateFunctionHandleInternalAsync<Node>("(element, externalNode) => { return element.adoptNode(externalNode); }", externalNode);
        }
        
        ///  <summary>
        ///  Checks if the document is currently focused.
        ///  </summary>
        ///  <returns>True if the document is active and in the focus.</returns>
        public virtual System.Threading.Tasks.Task<Boolean> HasFocusAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.hasFocus(); }");
        }
        
        ///  <summary>
        ///  Executes a command with the provided id and the optional arguments.
        ///  </summary>
        ///  <param name="commandId">The id of the command to issue.</param>
        ///  <param name="showUserInterface">Shall the UI be shown?</param>
        ///  <param name="value">
        ///  The argument value of the command, if any.
        ///  </param>
        ///  <returns>
        ///  True if the command has been successfully executed, otherwise
        ///  false.
        ///  </returns>
        public virtual System.Threading.Tasks.Task<Boolean> ExecCommandAsync(String commandId, Boolean showUserInterface, String value)
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element, commandId, showUserInterface, value) => { return element.execCommand(co" +
                    "mmandId, showUserInterface, value); }", commandId, showUserInterface, value);
        }
        
        ///  <summary>
        ///  Checks if the command with the provided id is enabled.
        ///  </summary>
        ///  <param name="commandId">The id of the command to check.</param>
        ///  <returns>
        ///  True if the command exists and is enabled, otherwise false.
        ///  </returns>
        public virtual System.Threading.Tasks.Task<Boolean> QueryCommandEnabledAsync(String commandId)
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element, commandId) => { return element.queryCommandEnabled(commandId); }", commandId);
        }
        
        ///  <summary>
        ///  Checks if the command with the provided id is currently in an
        ///  indeterminate state.
        ///  </summary>
        ///  <param name="commandId">The id of the command to check.</param>
        ///  <returns>
        ///  True if the command exists and is neither enabled nor disabled,
        ///  otherwise false.
        ///  </returns>
        public virtual System.Threading.Tasks.Task<Boolean> QueryCommandIndetermAsync(String commandId)
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element, commandId) => { return element.queryCommandIndeterm(commandId); }", commandId);
        }
        
        ///  <summary>
        ///  Checks if the command with the provided id has already been
        ///  executed for the current value.
        ///  </summary>
        ///  <param name="commandId">The id of the command to check.</param>
        ///  <returns>
        ///  True if the command has been executed, otherwise false.
        ///  </returns>
        public virtual System.Threading.Tasks.Task<Boolean> QueryCommandStateAsync(String commandId)
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element, commandId) => { return element.queryCommandState(commandId); }", commandId);
        }
        
        ///  <summary>
        ///  Checks if a command with the provided id exists and is supported
        ///  in the current context.
        ///  </summary>
        ///  <param name="commandId">The id of the command to check.</param>
        ///  <returns>True if the command exists, otherwise false.</returns>
        public virtual System.Threading.Tasks.Task<Boolean> QueryCommandSupportedAsync(String commandId)
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element, commandId) => { return element.queryCommandSupported(commandId); }", commandId);
        }
        
        ///  <summary>
        ///  Gets the value of the document, range, or current selection, for
        ///  the provided command.
        ///  </summary>
        ///  <param name="commandId">The id of the command to issue.</param>
        ///  <returns>The modified value.</returns>
        public virtual System.Threading.Tasks.Task<String?> QueryCommandValueAsync(String commandId)
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element, commandId) => { return element.queryCommandValue(commandId); }", commandId);
        }
        
        ///  <summary>
        ///  Appends nodes to current document.
        ///  </summary>
        ///  <param name="nodes">The nodes to append.</param>
        public virtual System.Threading.Tasks.Task AppendAsync(Node[] nodes)
        {
            return this.EvaluateFunctionInternalAsync("(element, nodes) => { return element.append(nodes); }", nodes);
        }
        
        ///  <summary>
        ///  Prepends nodes to the current document.
        ///  </summary>
        ///  <param name="nodes">The nodes to prepend.</param>
        public virtual System.Threading.Tasks.Task PrependAsync(Node[] nodes)
        {
            return this.EvaluateFunctionInternalAsync("(element, nodes) => { return element.prepend(nodes); }", nodes);
        }
        
        ///  <summary>
        ///  Enables the stylesheets matching the specified name in the current
        ///  style sheet set, and disables all other style sheets (except those
        ///  without a title, which are always enabled).
        ///  </summary>
        ///  <param name="name">The name of the sheets to enable.</param>
        public virtual System.Threading.Tasks.Task EnableStyleSheetsForSetAsync(String name)
        {
            return this.EvaluateFunctionInternalAsync("(element, name) => { return element.enableStyleSheetsForSet(name); }", name);
        }
        
        ///  <summary>
        ///  Returns the Element whose ID is given by elementId. If no such
        ///  element exists, returns null. The behavior is not defined if
        ///  more than one element have this ID.
        ///  </summary>
        ///  <param name="elementId">
        ///  A case-sensitive string representing the unique ID of the element
        ///  being sought.
        ///  </param>
        ///  <returns>The matching element.</returns>
        public virtual System.Threading.Tasks.Task<Element?> GetElementByIdAsync(String elementId)
        {
            return this.EvaluateFunctionHandleInternalAsync<Element?>("(element, elementId) => { return element.getElementById(elementId); }", elementId);
        }
        
        ///  <summary>
        ///  Gets a list of all of the anchors in the document.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<HtmlCollection<HtmlAnchorElement>> GetAnchorsAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlCollection<HtmlAnchorElement>>("(element) => { return element.anchors; }");
        }
        
        ///  <summary>
        ///  Gets whether the entire document is editable.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetDesignModeAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.designMode; }");
        }
        
        ///  <summary>
        ///  Sets whether the entire document is editable.
        ///  </summary>
        public virtual Task SetDesignModeAsync(String designMode)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.designMode = val; }", designMode);
        }
        
        ///  <summary>
        ///  Gets the value of the dir attribute.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetDirectionAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.dir; }");
        }
        
        ///  <summary>
        ///  Sets the value of the dir attribute.
        ///  </summary>
        public virtual Task SetDirAsync(String? dir)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.dir = val; }", dir);
        }
        
        ///  <summary>
        ///  Gets the URI of the current document.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetDocumentUriAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.documentURI; }");
        }
        
        ///  <summary>
        ///  Gets the character encoding of the current document.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetCharacterSetAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.characterSet; }");
        }
        
        ///  <summary>
        ///  Gets a value to indicate whether the document is rendered in Quirks
        ///  mode (BackComp) or Strict mode (CSS1Compat).
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetCompatModeAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.compatMode; }");
        }
        
        ///  <summary>
        ///  Gets a string containing the URL of the current document.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetUrlAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.URL; }");
        }
        
        ///  <summary>
        ///  Gets the Content-Type from the MIME Header of the current document.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetContentTypeAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.contentType; }");
        }
        
        ///  <summary>
        ///  Gets the document type.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<DocumentType> GetDoctypeAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<DocumentType>("(element) => { return element.doctype; }");
        }
        
        ///  <summary>
        ///  Gets the root element of the document.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Element> GetDocumentElementAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<Element>("(element) => { return element.documentElement; }");
        }
        
        ///  <summary>
        ///  Gets the date of the last modification.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetLastModifiedAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.lastModified; }");
        }
        
        ///  <summary>
        ///  Gets the current location of the document.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Location> GetLocationAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<Location>("(element) => { return element.location; }");
        }
        
        ///  <summary>
        ///  Gets the forms in the document.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<HtmlCollection<HtmlFormElement>> GetFormsAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlCollection<HtmlFormElement>>("(element) => { return element.forms; }");
        }
        
        ///  <summary>
        ///  Gets the images in the document.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<HtmlCollection<HtmlImageElement>> GetImagesAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlCollection<HtmlImageElement>>("(element) => { return element.images; }");
        }
        
        ///  <summary>
        ///  Gets the scripts in the document.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<HtmlCollection<HtmlScriptElement>> GetScriptsAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlCollection<HtmlScriptElement>>("(element) => { return element.scripts; }");
        }
        
        ///  <summary>
        ///  Gets a list of the embed elements within the current document.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<HtmlCollection<HtmlEmbedElement>> GetPluginsAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlCollection<HtmlEmbedElement>>("(element) => { return element.embeds; }");
        }
        
        ///  <summary>
        ///  Gets a list of the commands (menu item, button, and link elements)
        ///  within the current document.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<HtmlCollection<Element>> GetCommandsAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlCollection<Element>>("(element) => { return element.commands; }");
        }
        
        ///  <summary>
        ///  Gets a collection of all area and anchor elements in a document
        ///  with a value for the href attribute.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<HtmlCollection<Element>> GetLinksAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlCollection<Element>>("(element) => { return element.links; }");
        }
        
        ///  <summary>
        ///  Gets the title of the document.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetTitleAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.title; }");
        }
        
        ///  <summary>
        ///  Sets the title of the document.
        ///  </summary>
        public virtual Task SetTitleAsync(String? title)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.title = val; }", title);
        }
        
        ///  <summary>
        ///  Gets the head element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<HtmlHeadElement?> GetHeadAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlHeadElement?>("(element) => { return element.head; }");
        }
        
        ///  <summary>
        ///  Gets the body element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<HtmlElement?> GetBodyAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlElement?>("(element) => { return element.body; }");
        }
        
        ///  <summary>
        ///  Gets the body element.
        ///  </summary>
        public virtual Task SetBodyAsync(HtmlElement? body)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.body = val; }", body);
        }
        
        ///  <summary>
        ///  Gets the document cookie.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetCookieAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.cookie; }");
        }
        
        ///  <summary>
        ///  Sets the document cookie.
        ///  </summary>
        public virtual Task SetCookieAsync(String cookie)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.cookie = val; }", cookie);
        }
        
        ///  <summary>
        ///  Gets the Unicode serialization of document's origin.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetOriginAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.origin; }");
        }
        
        ///  <summary>
        ///  Gets the domain portion of the origin of the current
        ///  document.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetDomainAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.domain; }");
        }
        
        ///  <summary>
        ///  Sets the domain portion of the origin of the current
        ///  document.
        ///  </summary>
        public virtual Task SetDomainAsync(String domain)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.domain = val; }", domain);
        }
        
        ///  <summary>
        ///  Gets the referer to that pointed to the current document.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetReferrerAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.referrer; }");
        }
        
        ///  <summary>
        ///  Gets the currently focused element, that is, the element that will
        ///  get keystroke events if the user types any.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Element?> GetActiveElementAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<Element?>("(element) => { return element.activeElement; }");
        }
        
        ///  <summary>
        ///  Gets the script element which is currently being processed.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<HtmlScriptElement?> GetCurrentScriptAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlScriptElement?>("(element) => { return element.currentScript; }");
        }
        
        ///  <summary>
        ///  Gets the window object associated with the document or null if none
        ///  available.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Window?> GetDefaultViewAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<Window?>("(element) => { return element.defaultView; }");
        }
        
        ///  <summary>
        ///  Gets the child elements.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<HtmlCollection<Element>> GetChildrenAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlCollection<Element>>("(element) => { return element.children; }");
        }
        
        ///  <summary>
        ///  Gets the first child element of this element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Element?> GetFirstElementChildAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<Element?>("(element) => { return element.firstElementChild; }");
        }
        
        ///  <summary>
        ///  Gets the last child element of this element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Element?> GetLastElementChildAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<Element?>("(element) => { return element.lastElementChild; }");
        }
        
        ///  <summary>
        ///  Gets the number of child elements.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Int32> GetChildElementCountAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32>("(element) => { return element.childElementCount; }");
        }
        
        ///  <summary>
        ///  Gets a list of stylesheet objects for stylesheets explicitly linked
        ///  into or embedded in a document.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<StyleSheetList> GetStyleSheetsAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<StyleSheetList>("(element) => { return element.styleSheets; }");
        }
        
        ///  <summary>
        ///  Gets the selected set of stylesheets.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetSelectedStyleSheetSetAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.selectedStyleSheetSet; }");
        }
        
        ///  <summary>
        ///  Sets the selected set of stylesheets.
        ///  </summary>
        public virtual Task SetSelectedStyleSheetSetAsync(String? selectedStyleSheetSet)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.selectedStyleSheetSet = val; }", selectedStyleSheetSet);
        }
        
        ///  <summary>
        ///  Gets the last stylesheet set.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetLastStyleSheetSetAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.lastStyleSheetSet; }");
        }
        
        ///  <summary>
        ///  Gets the preferred stylesheet set.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetPreferredStyleSheetSetAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.preferredStyleSheetSet; }");
        }
        
        ///  <summary>
        ///  Gets a live list of all of the currently-available style sheet
        ///  sets.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<StringList> GetStyleSheetSetsAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<StringList>("(element) => { return element.styleSheetSets; }");
        }
    }
    
    ///  <summary>
    ///  A Node is an interface from which a number of DOM types inherit, and
    ///  allows these various types to be treated similarly.
    ///  </summary>
    public partial class Node : EventTarget
    {
        
        ///  <summary>
        ///  Clones the node, and optionally, all of its contents.
        ///  By default, it clones the content of the node.
        ///  </summary>
        ///  <param name="deep">
        ///  Optionally: Sets if all of the content should be cloned as well.
        ///  </param>
        ///  <returns>The cloned node.</returns>
        public virtual System.Threading.Tasks.Task<Node> CloneNodeAsync(Boolean deep)
        {
            return this.EvaluateFunctionHandleInternalAsync<Node>("(element, deep) => { return element.cloneNode(deep); }", deep);
        }
        
        ///  <summary>
        ///  Determines if two nodes are equal.
        ///  </summary>
        ///  <param name="otherNode">
        ///  The node to be compared to the node that is executing the method.
        ///  </param>
        ///  <returns>
        ///  True if the node specified in the otherNode parameter is equal to
        ///  the current node.
        ///  </returns>
        public virtual System.Threading.Tasks.Task<Boolean> IsEqualNodeAsync(Node otherNode)
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element, otherNode) => { return element.isEqualNode(otherNode); }", otherNode);
        }
        
        ///  <summary>
        ///  Compares the position of two nodes in a document.
        ///  </summary>
        ///  <param name="otherNode">
        ///  The node to be compared to the reference node, which is the node
        ///  executing the method.
        ///  </param>
        ///  <returns>The relation between the two nodes.</returns>
        public virtual System.Threading.Tasks.Task<DocumentPositions> CompareDocumentPositionAsync(Node otherNode)
        {
            return this.EvaluateFunctionInternalAsync<DocumentPositions>("(element, otherNode) => { return element.compareDocumentPosition(otherNode); }", otherNode);
        }
        
        ///  <summary>
        ///  Cleans up all the text nodes under this element, i.e. merges
        ///  adjacent and removes empty text nodes.
        ///  </summary>
        public virtual System.Threading.Tasks.Task NormalizeAsync()
        {
            return this.EvaluateFunctionInternalAsync("(element) => { return element.normalize(); }");
        }
        
        ///  <summary>
        ///  Returns true if other is an inclusive descendant of the context
        ///  object, and false otherwise (including when other is null).
        ///  </summary>
        ///  <param name="otherNode">The Node to check the childs for.</param>
        ///  <returns>
        ///  True if the given node is contained within this Node, otherwise
        ///  false.
        ///  </returns>
        public virtual System.Threading.Tasks.Task<Boolean> ContainsAsync(Node otherNode)
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element, otherNode) => { return element.contains(otherNode); }", otherNode);
        }
        
        ///  <summary>
        ///  Indicates whether or not a namespace is the default namespace for a
        ///  document.
        ///  </summary>
        ///  <param name="namespaceUri">
        ///  The namespace to be compared to the default namespace.
        ///  </param>
        ///  <returns>
        ///  True if the given namespace URI is the default for the current
        ///  document.
        ///  </returns>
        public virtual System.Threading.Tasks.Task<Boolean> IsDefaultNamespaceAsync(String namespaceUri)
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element, namespaceUri) => { return element.isDefaultNamespace(namespaceUri); }", namespaceUri);
        }
        
        ///  <summary>
        ///  Gets the Uniform Resource Identifier (URI) of the namespace
        ///  associated with a namespace prefix, if any.
        ///  </summary>
        ///  <param name="prefix">The namespace prefix.</param>
        ///  <returns>The URI of the namespace.</returns>
        public virtual System.Threading.Tasks.Task<String?> LookupNamespaceURIAsync(String prefix)
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element, prefix) => { return element.lookupNamespaceURI(prefix); }", prefix);
        }
        
        ///  <summary>
        ///  Gets the namespace prefix associated with a Uniform
        ///  Resource Identifier (URI), if any.
        ///  </summary>
        ///  <param name="namespaceUri">The URI.</param>
        ///  <returns>The namespace prefix associated with the URI.</returns>
        public virtual System.Threading.Tasks.Task<String?> LookupPrefixAsync(String namespaceUri)
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element, namespaceUri) => { return element.lookupPrefix(namespaceUri); }", namespaceUri);
        }
        
        ///  <summary>
        ///  Inserts a node as the last child node of this element.
        ///  </summary>
        ///  <param name="child">The node to be appended.</param>
        ///  <returns>The appended Node.</returns>
        public virtual System.Threading.Tasks.Task<Node> AppendChildAsync(Node child)
        {
            return this.EvaluateFunctionHandleInternalAsync<Node>("(element, child) => { return element.appendChild(child); }", child);
        }
        
        ///  <summary>
        ///  Inserts the newElement immediately before the referenceElement.
        ///  </summary>
        ///  <param name="newElement">The node to be inserted.</param>
        ///  <param name="referenceElement">
        ///  The existing child element that will succeed the new element.
        ///  </param>
        ///  <returns>The inserted node.</returns>
        public virtual System.Threading.Tasks.Task<Node> InsertBeforeAsync(Node newElement, Node? referenceElement)
        {
            return this.EvaluateFunctionHandleInternalAsync<Node>("(element, newElement, referenceElement) => { return element.insertBefore(newEleme" +
                    "nt, referenceElement); }", newElement, referenceElement);
        }
        
        ///  <summary>
        ///  Removes a child node from the current element, which must be a
        ///  child of the current node.
        ///  </summary>
        ///  <param name="child">The child to be removed.</param>
        ///  <returns>The removed node.</returns>
        public virtual System.Threading.Tasks.Task<Node> RemoveChildAsync(Node child)
        {
            return this.EvaluateFunctionHandleInternalAsync<Node>("(element, child) => { return element.removeChild(child); }", child);
        }
        
        ///  <summary>
        ///  Replaces one child node of the current one with the second one
        ///  given in the parameters.
        ///  </summary>
        ///  <param name="newChild">The child to be inserted.</param>
        ///  <param name="oldChild">The child to be removed.</param>
        ///  <returns>The old node, if any.</returns>
        public virtual System.Threading.Tasks.Task<Node> ReplaceChildAsync(Node newChild, Node oldChild)
        {
            return this.EvaluateFunctionHandleInternalAsync<Node>("(element, newChild, oldChild) => { return element.replaceChild(newChild, oldChild" +
                    "); }", newChild, oldChild);
        }
        
        ///  <summary>
        ///  Gets a string representing the base URL.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetBaseUriAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.baseURI; }");
        }
        
        ///  <summary>
        ///  Gets a string containing the name of the Node. The structure of the
        ///  name will differ with the name type.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetNodeNameAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.nodeName; }");
        }
        
        ///  <summary>
        ///  Gets a live NodeList containing all the children of this node.
        ///  Being live means that if the children of the node change, the
        ///  NodeList object is automatically updated.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<NodeList> GetChildNodesAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<NodeList>("(element) => { return element.childNodes; }");
        }
        
        ///  <summary>
        ///  Gets the Document that this node belongs to. If no document is
        ///  associated with it, returns null.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Document?> GetOwnerAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<Document?>("(element) => { return element.ownerDocument; }");
        }
        
        ///  <summary>
        ///  Gets an Element that is the parent of this node. If the node has no
        ///  parent, or if that parent is not an Element, this property returns
        ///  null.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Element?> GetParentElementAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<Element?>("(element) => { return element.parentElement; }");
        }
        
        ///  <summary>
        ///  Gets a node that is the parent of this node. If there is no such
        ///  node, like if this node is the top of the tree or if doesn't
        ///  participate in a tree, this property returns null.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Node?> GetParentAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<Node?>("(element) => { return element.parentNode; }");
        }
        
        ///  <summary>
        ///  Gets a Node representing the first direct child node of the node,
        ///  or null if the node has no child.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Node?> GetFirstChildAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<Node?>("(element) => { return element.firstChild; }");
        }
        
        ///  <summary>
        ///  Gets a node representing the last direct child node of the node,
        ///  or null if the node has no child.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Node?> GetLastChildAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<Node?>("(element) => { return element.lastChild; }");
        }
        
        ///  <summary>
        ///  Gets a Node representing the next node in the tree, or null if
        ///  there isn't such node.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Node?> GetNextSiblingAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<Node?>("(element) => { return element.nextSibling; }");
        }
        
        ///  <summary>
        ///  Gets a Node representing the previous node in the tree, or null if
        ///  there isn't such node.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Node?> GetPreviousSiblingAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<Node?>("(element) => { return element.previousSibling; }");
        }
        
        ///  <summary>
        ///  Gets an unsigned short representing the type of the node.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<NodeType> GetNodeTypeAsync()
        {
            return this.EvaluateFunctionInternalAsync<NodeType>("(element) => { return element.nodeType; }");
        }
        
        ///  <summary>
        ///  Gets a string representing the value of an object. For most
        ///  node types, this returns null and any set operation is ignored.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetNodeValueAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.nodeValue; }");
        }
        
        ///  <summary>
        ///  Sets a string representing the value of an object. For most
        ///  node types, this returns null and any set operation is ignored.
        ///  </summary>
        public virtual Task SetNodeValueAsync(String nodeValue)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.nodeValue = val; }", nodeValue);
        }
        
        ///  <summary>
        ///  Gets the textual content of an element and all its
        ///  descendants.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetTextContentAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.textContent; }");
        }
        
        ///  <summary>
        ///  Sets the textual content of an element and all its
        ///  descendants.
        ///  </summary>
        public virtual Task SetTextContentAsync(String textContent)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.textContent = val; }", textContent);
        }
        
        ///  <summary>
        ///  Gets an indicator if the element has any child nodes, or not.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetHasChildNodesAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.hasChildNodes; }");
        }
    }
    
    ///  <summary>
    ///  Represent a stylesheet for collecting style information.
    ///  </summary>
    public partial class StyleSheet : RemoteHandle
    {
        
        ///  <summary>
        ///  Gets the style sheet language for this style sheet.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetTypeAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.type; }");
        }
        
        ///  <summary>
        ///  Gets the value of the attribute, which is its location. For inline
        ///  style sheets, the value of this attribute is null.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetHrefAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.href; }");
        }
        
        ///  <summary>
        ///  Gets the element that associates this style sheet with the
        ///  document.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Element> GetOwnerNodeAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<Element>("(element) => { return element.ownerNode; }");
        }
        
        ///  <summary>
        ///  Gets the advisory title. The title is often specified in the
        ///  ownerNode.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetTitleAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.title; }");
        }
        
        ///  <summary>
        ///  Gets the indented destination media for style information. The
        ///  media is often specified in the ownerNode. If no media has been
        ///  specified, the MediaList is empty.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<MediaList> GetMediaAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<MediaList>("(element) => { return element.media; }");
        }
        
        ///  <summary>
        ///  Gets if the stylesheet is applied to the document.
        ///  Modifying this attribute may cause a new resolution of style for
        ///  the document. If the media doesn't apply to the current user agent,
        ///  the disabled attribute is ignored.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetDisabledAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.disabled; }");
        }
        
        ///  <summary>
        ///  Sets if the stylesheet is applied to the document.
        ///  Modifying this attribute may cause a new resolution of style for
        ///  the document. If the media doesn't apply to the current user agent,
        ///  the disabled attribute is ignored.
        ///  </summary>
        public virtual Task SetDisabledAsync(Boolean disabled)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.disabled = val; }", disabled);
        }
    }
    
    ///  <summary>
    ///  The Element interface represents an object within a DOM document.
    ///  </summary>
    public partial class Element : Node
    {
        
        ///  <summary>
        ///  Inserts new HTML elements specified by the given HTML string at
        ///  a position relative to the current element specified by the
        ///  position.
        ///  </summary>
        ///  <param name="position">The relation to the current element.</param>
        ///  <param name="html">The HTML code to generate elements for.</param>
        public virtual System.Threading.Tasks.Task InsertAdjacentHtmlAsync(AdjacentPosition position, String html)
        {
            return this.EvaluateFunctionInternalAsync("(element, position, html) => { return element.insertAdjacentHTML(position, html);" +
                    " }", position, html);
        }
        
        ///  <summary>
        ///  Returns a boolean value indicating whether the specified element
        ///  has the specified attribute or not.
        ///  </summary>
        ///  <param name="name">The attributes name.</param>
        ///  <returns>The return value of true or false.</returns>
        public virtual System.Threading.Tasks.Task<Boolean> HasAttributeAsync(String name)
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element, name) => { return element.hasAttribute(name); }", name);
        }
        
        ///  <summary>
        ///  Returns a boolean value indicating whether the specified element
        ///  has the specified attribute or not.
        ///  </summary>
        ///  <param name="namespaceUri">
        ///  A string specifying the namespace of the attribute.
        ///  </param>
        ///  <param name="localName">The attributes name.</param>
        ///  <returns>The return value of true or false.</returns>
        public virtual System.Threading.Tasks.Task<Boolean> HasAttributeNSAsync(String namespaceUri, String localName)
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element, namespaceUri, localName) => { return element.hasAttributeNS(namespaceUr" +
                    "i, localName); }", namespaceUri, localName);
        }
        
        ///  <summary>
        ///  Returns the value of the named attribute on the specified element.
        ///  </summary>
        ///  <param name="name">
        ///  The name of the attribute whose value you want to get.
        ///  </param>
        ///  <returns>
        ///  If the named attribute does not exist, the value returned will be
        ///  null, otherwise the attribute's value.
        ///  </returns>
        public virtual System.Threading.Tasks.Task<String?> GetAttributeAsync(String name)
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element, name) => { return element.getAttribute(name); }", name);
        }
        
        ///  <summary>
        ///  Returns the value of the named attribute on the specified element.
        ///  </summary>
        ///  <param name="namespaceUri">
        ///  A string specifying the namespace of the attribute.
        ///  </param>
        ///  <param name="localName">
        ///  The name of the attribute whose value you want to get.
        ///  </param>
        ///  <returns>
        ///  If the named attribute does not exist, the value returned will be
        ///  null, otherwise the attribute's value.
        ///  </returns>
        public virtual System.Threading.Tasks.Task<String?> GetAttributeNSAsync(String namespaceUri, String localName)
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element, namespaceUri, localName) => { return element.getAttributeNS(namespaceUr" +
                    "i, localName); }", namespaceUri, localName);
        }
        
        ///  <summary>
        ///  Adds a new attribute or changes the value of an existing attribute
        ///  on the specified element.
        ///  </summary>
        ///  <param name="name">The name of the attribute as a string.</param>
        ///  <param name="value">The desired new value of the attribute.</param>
        ///  <returns>The current element.</returns>
        public virtual System.Threading.Tasks.Task SetAttributeAsync(String name, String value)
        {
            return this.EvaluateFunctionInternalAsync("(element, name, value) => { return element.setAttribute(name, value); }", name, value);
        }
        
        ///  <summary>
        ///  Adds a new attribute or changes the value of an existing attribute
        ///  on the specified element.
        ///  </summary>
        ///  <param name="namespaceUri">
        ///  A string specifying the namespace of the attribute.
        ///  </param>
        ///  <param name="name">The name of the attribute as a string.</param>
        ///  <param name="value">The desired new value of the attribute.</param>
        public virtual System.Threading.Tasks.Task SetAttributeNSAsync(String namespaceUri, String name, String value)
        {
            return this.EvaluateFunctionInternalAsync("(element, namespaceUri, name, value) => { return element.setAttributeNS(namespace" +
                    "Uri, name, value); }", namespaceUri, name, value);
        }
        
        ///  <summary>
        ///  Removes an attribute from the specified element.
        ///  </summary>
        ///  <param name="name">
        ///  Is a string that names the attribute to be removed.
        ///  </param>
        ///  <returns>True if an attribute was removed, otherwise false.</returns>
        public virtual System.Threading.Tasks.Task<Boolean> RemoveAttributeAsync(String name)
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element, name) => { return element.removeAttribute(name); }", name);
        }
        
        ///  <summary>
        ///  Removes an attribute from the specified element.
        ///  </summary>
        ///  <param name="namespaceUri">
        ///  A string specifying the namespace of the attribute.
        ///  </param>
        ///  <param name="localName">
        ///  Is a string that names the attribute to be removed.
        ///  </param>
        ///  <returns>True if an attribute was removed, otherwise false.</returns>
        public virtual System.Threading.Tasks.Task<Boolean> RemoveAttributeNSAsync(String namespaceUri, String localName)
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element, namespaceUri, localName) => { return element.removeAttributeNS(namespac" +
                    "eUri, localName); }", namespaceUri, localName);
        }
        
        ///  <summary>
        ///  Returns a set of elements which have all the given class names.
        ///  </summary>
        ///  <param name="classNames">
        ///  A string representing the list of class names to match; class names
        ///  are separated by whitespace.
        ///  </param>
        ///  <returns>A collection of elements.</returns>
        public virtual System.Threading.Tasks.Task<HtmlCollection<Element>> GetElementsByClassNameAsync(String classNames)
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlCollection<Element>>("(element, classNames) => { return element.getElementsByClassName(classNames); }", classNames);
        }
        
        ///  <summary>
        ///  Returns a NodeList of elements with the given tag name. The
        ///  complete document is searched, including the root node.
        ///  </summary>
        ///  <param name="tagName">
        ///  A string representing the name of the elements. The special string
        ///  "*" represents all elements.
        ///  </param>
        ///  <returns>
        ///  A collection of elements in the order they appear in the tree.
        ///  </returns>
        public virtual System.Threading.Tasks.Task<HtmlCollection<Element>> GetElementsByTagNameAsync(String tagName)
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlCollection<Element>>("(element, tagName) => { return element.getElementsByTagName(tagName); }", tagName);
        }
        
        ///  <summary>
        ///  Returns a list of elements with the given tag name belonging to the
        ///  given namespace. The complete document is searched, including the
        ///  root node.
        ///  </summary>
        ///  <param name="namespaceUri">
        ///  The namespace URI of elements to look for.
        ///  </param>
        ///  <param name="tagName">
        ///  Either the local name of elements to look for or the special value
        ///  "*", which matches all elements.
        ///  </param>
        ///  <returns>
        ///  A collection of elements in the order they appear in the tree.
        ///  </returns>
        public virtual System.Threading.Tasks.Task<HtmlCollection<Element>> GetElementsByTagNameNSAsync(String namespaceUri, String tagName)
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlCollection<Element>>("(element, namespaceUri, tagName) => { return element.getElementsByTagNameNS(names" +
                    "paceUri, tagName); }", namespaceUri, tagName);
        }
        
        ///  <summary>
        ///  Checks if the element is matched by the given selector.
        ///  </summary>
        ///  <param name="selectors">Represents the selector to test.</param>
        ///  <returns>
        ///  True if the element would be selected by the specified selector,
        ///  otherwise false.
        ///  </returns>
        public virtual System.Threading.Tasks.Task<Boolean> MatchesAsync(String selectors)
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element, selectors) => { return element.matches(selectors); }", selectors);
        }
        
        ///  <summary>
        ///  Returns the closest ancestor of the current element (or the current element itself) which matches the selectors given in the parameter.
        ///  </summary>
        ///  <param name="selectors">Represents the selector to test.</param>
        ///  <returns>
        ///  The closest ancestor of the current element (or the current element itself) which matches the selectors given. If there isn't such an ancestor, it returns null.
        ///  </returns>
        public virtual System.Threading.Tasks.Task<Element?> ClosestAsync(String selectors)
        {
            return this.EvaluateFunctionHandleInternalAsync<Element?>("(element, selectors) => { return element.closest(selectors); }", selectors);
        }
        
        ///  <summary>
        ///  Creates a new shadow root for the current element, if there is none
        ///  already.
        ///  </summary>
        ///  <param name="mode">The mode of the shadow root.</param>
        ///  <returns>The new shadow root.</returns>
        public virtual System.Threading.Tasks.Task<ShadowRoot> AttachShadowAsync(ShadowRootMode mode)
        {
            return this.EvaluateFunctionHandleInternalAsync<ShadowRoot>("(element, mode) => { return element.attachShadow(mode); }", mode);
        }
        
        ///  <summary>
        ///  Gets the namespace prefix of this element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetPrefixAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.prefix; }");
        }
        
        ///  <summary>
        ///  Gets the local part of the qualified name of this element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetLocalNameAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.localName; }");
        }
        
        ///  <summary>
        ///  Gets the namespace URI of this element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetNamespaceUriAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.namespaceURI; }");
        }
        
        ///  <summary>
        ///  Gets the sequence of associated attributes.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<NamedNodeMap> GetAttributesAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<NamedNodeMap>("(element) => { return element.attributes; }");
        }
        
        ///  <summary>
        ///  Gets the list of class names.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<TokenList> GetClassListAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<TokenList>("(element) => { return element.classList; }");
        }
        
        ///  <summary>
        ///  Gets the value of the class attribute.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetClassNameAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.className; }");
        }
        
        ///  <summary>
        ///  Sets the value of the class attribute.
        ///  </summary>
        public virtual Task SetClassNameAsync(String? className)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.className = val; }", className);
        }
        
        ///  <summary>
        ///  Gets the id value of the element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetIdAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.id; }");
        }
        
        ///  <summary>
        ///  Sets the id value of the element.
        ///  </summary>
        public virtual Task SetIdAsync(String? id)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.id = val; }", id);
        }
        
        ///  <summary>
        ///  Gets the inner HTML (excluding the current element) of the
        ///  element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetInnerHtmlAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.innerHTML; }");
        }
        
        ///  <summary>
        ///  Sets the inner HTML (excluding the current element) of the
        ///  element.
        ///  </summary>
        public virtual Task SetInnerHtmlAsync(String innerHTML)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.innerHTML = val; }", innerHTML);
        }
        
        ///  <summary>
        ///  Gets the outer HTML (including the current element) of the
        ///  element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetOuterHtmlAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.outerHTML; }");
        }
        
        ///  <summary>
        ///  Sets the outer HTML (including the current element) of the
        ///  element.
        ///  </summary>
        public virtual Task SetOuterHtmlAsync(String outerHTML)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.outerHTML = val; }", outerHTML);
        }
        
        ///  <summary>
        ///  Gets the name of the tag that represents the current element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetTagNameAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.tagName; }");
        }
        
        ///  <summary>
        ///  Gets the assigned slot of the current element, if any.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Element?> GetAssignedSlotAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<Element?>("(element) => { return element.assignedSlot; }");
        }
        
        ///  <summary>
        ///  Gets the value of the slot attribute.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetSlotAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.slot; }");
        }
        
        ///  <summary>
        ///  Gets the value of the slot attribute.
        ///  </summary>
        public virtual Task SetSlotAsync(String? slot)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.slot = val; }", slot);
        }
        
        ///  <summary>
        ///  Gets the shadow root of the current element, if any.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<ShadowRoot?> GetShadowRootAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<ShadowRoot?>("(element) => { return element.shadowRoot; }");
        }
        
        ///  <summary>
        ///  Gets the child elements.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<HtmlCollection<Element>> GetChildrenAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlCollection<Element>>("(element) => { return element.children; }");
        }
        
        ///  <summary>
        ///  Gets the first child element of this element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Element?> GetFirstElementChildAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<Element?>("(element) => { return element.firstElementChild; }");
        }
        
        ///  <summary>
        ///  Gets the last child element of this element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Element?> GetLastElementChildAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<Element?>("(element) => { return element.lastElementChild; }");
        }
        
        ///  <summary>
        ///  Gets the number of child elements.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Int32> GetChildElementCountAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32>("(element) => { return element.childElementCount; }");
        }
        
        ///  <summary>
        ///  Gets the Element immediately following this ChildNode in its
        ///  parent's children list, or null if there is no Element in the list
        ///  following this ChildNode.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Element?> GetNextElementSiblingAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<Element?>("(element) => { return element.nextElementSibling; }");
        }
        
        ///  <summary>
        ///  Gets the Element immediately prior to this ChildNode in its
        ///  parent's children list, or null if there is no Element in the list
        ///  prior to this ChildNode.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Element?> GetPreviousElementSiblingAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<Element?>("(element) => { return element.previousElementSibling; }");
        }
    }
    
    ///  <summary>
    ///  This type represents a DOM element's attribute as an object.
    ///  </summary>
    public partial class Attr : Node
    {
        
        ///  <summary>
        ///  Gets the local name of the attribute.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetLocalNameAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.localName; }");
        }
        
        ///  <summary>
        ///  Gets the attribute's name.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetNameAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.name; }");
        }
        
        ///  <summary>
        ///  Gets the attribute's value.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetValueAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.value; }");
        }
        
        ///  <summary>
        ///  Gets the attribute's value.
        ///  </summary>
        public virtual Task SetValueAsync(String value)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.value = val; }", value);
        }
        
        ///  <summary>
        ///  Gets the namespace URL of the attribute.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetNamespaceUriAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.namespaceURI; }");
        }
        
        ///  <summary>
        ///  Gets the prefix used by the namespace.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetPrefixAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.prefix; }");
        }
        
        ///  <summary>
        ///  Gets the owning element, if any.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Element?> GetOwnerElementAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<Element?>("(element) => { return element.ownerElement; }");
        }
        
        ///  <summary>
        ///  Gets always true.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetIsSpecifiedAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.specified; }");
        }
    }
    
    ///  <summary>
    ///  NamedNodeNap is a key/value pair of nodes that can be accessed by
    ///  numeric or string index.
    ///  https://dom.spec.whatwg.org/#interface-namednodemap
    ///  </summary>
    public partial class NamedNodeMap : RemoteHandle
    {
        
        ///  <summary>
        ///  Gets a named item in the NamedNodeMap.
        ///  </summary>
        ///  <param name="name">The name of the item to get.</param>
        ///  <returns>The attribute with the given name.</returns>
        public virtual System.Threading.Tasks.Task<Attr?> GetNamedItemAsync(String name)
        {
            return this.EvaluateFunctionHandleInternalAsync<Attr?>("(element, name) => { return element.getNamedItem(name); }", name);
        }
        
        ///  <summary>
        ///  Sets a named item in the NamedNodeMap.
        ///  </summary>
        ///  <param name="item">The named item to set.</param>
        ///  <returns>The replaced attribute, if any.</returns>
        public virtual System.Threading.Tasks.Task<Attr?> SetNamedItemAsync(Attr item)
        {
            return this.EvaluateFunctionHandleInternalAsync<Attr?>("(element, item) => { return element.setNamedItem(item); }", item);
        }
        
        ///  <summary>
        ///  Removes a named item from the NamedNodeMap
        ///  </summary>
        ///  <param name="name">The named item to remove.</param>
        ///  <returns>The removed attribute.</returns>
        public virtual System.Threading.Tasks.Task<Attr> RemoveNamedItemAsync(String name)
        {
            return this.EvaluateFunctionHandleInternalAsync<Attr>("(element, name) => { return element.removeNamedItem(name); }", name);
        }
        
        ///  <summary>
        ///  Gets a named item in the NamedNodeMap identified by namespace and
        ///  local name.
        ///  </summary>
        ///  <param name="namespaceUri">The namespace of the item.</param>
        ///  <param name="localName">The local name of the item.</param>
        ///  <returns>The attribute with the namespaceUri and name.</returns>
        public virtual System.Threading.Tasks.Task<Attr?> GetNamedItemNSAsync(String namespaceUri, String localName)
        {
            return this.EvaluateFunctionHandleInternalAsync<Attr?>("(element, namespaceUri, localName) => { return element.getNamedItemNS(namespaceUr" +
                    "i, localName); }", namespaceUri, localName);
        }
        
        ///  <summary>
        ///  Sets a named item in the NamedNodeMap.
        ///  </summary>
        ///  <param name="item">The named item to set.</param>
        ///  <returns>The replaced attribute, if any.</returns>
        public virtual System.Threading.Tasks.Task<Attr?> SetNamedItemNSAsync(Attr item)
        {
            return this.EvaluateFunctionHandleInternalAsync<Attr?>("(element, item) => { return element.setNamedItemNS(item); }", item);
        }
        
        ///  <summary>
        ///  Removes a named item from the NamedNodeMap.
        ///  </summary>
        ///  <param name="namespaceUri">The namespace of the item.</param>
        ///  <param name="localName">The local name of the item.</param>
        ///  <returns>The removed attribute.</returns>
        public virtual System.Threading.Tasks.Task<Attr> RemoveNamedItemNSAsync(String namespaceUri, String localName)
        {
            return this.EvaluateFunctionHandleInternalAsync<Attr>("(element, namespaceUri, localName) => { return element.removeNamedItemNS(namespac" +
                    "eUri, localName); }", namespaceUri, localName);
        }
        
        ///  <summary>
        ///  Gets the number of nodes in the NamedNodeMap.
        ///  </summary>
        ///  <returns>The number of nodes in the collection.</returns>
        public virtual System.Threading.Tasks.Task<Int32> GetLengthAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32>("(element) => { return element.length; }");
        }
    }
    
    ///  <summary>
    ///  This type represents a set of space-separated tokens.
    ///  </summary>
    public partial class TokenList : RemoteHandle
    {
        
        ///  <summary>
        ///  Returns true if the underlying string contains a token, otherwise
        ///  false.
        ///  </summary>
        ///  <param name="token">The token to search for.</param>
        ///  <returns>The result of the search.</returns>
        public virtual System.Threading.Tasks.Task<Boolean> ContainsAsync(String token)
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element, token) => { return element.contains(token); }", token);
        }
        
        ///  <summary>
        ///  Adds some tokens to the underlying string.
        ///  </summary>
        ///  <param name="tokens">A list of tokens to add.</param>
        public virtual System.Threading.Tasks.Task AddAsync(String[] tokens)
        {
            return this.EvaluateFunctionInternalAsync("(element, tokens) => { return element.add(tokens); }", tokens);
        }
        
        ///  <summary>
        ///  Remove some tokens from the underlying string.
        ///  </summary>
        ///  <param name="tokens">A list of tokens to remove.</param>
        public virtual System.Threading.Tasks.Task RemoveAsync(String[] tokens)
        {
            return this.EvaluateFunctionInternalAsync("(element, tokens) => { return element.remove(tokens); }", tokens);
        }
        
        ///  <summary>
        ///  Removes the specified token from string and returns false.
        ///  If token doesn't exist it's added and the function returns true.
        ///  </summary>
        ///  <param name="token">The token to toggle.</param>
        ///  <param name="force"></param>
        ///  <returns>
        ///  True if the token has been added, otherwise false.
        ///  </returns>
        public virtual System.Threading.Tasks.Task<Boolean> ToggleAsync(String token, Boolean force)
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element, token, force) => { return element.toggle(token, force); }", token, force);
        }
        
        ///  <summary>
        ///  Gets the number of contained tokens.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Int32> GetLengthAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32>("(element) => { return element.length; }");
        }
    }
    
    ///  <summary>
    ///  The DOMStringMap interface represents a set of name-value pairs.
    ///  </summary>
    public partial class StringMap : RemoteHandle
    {
    }
    
    ///  <summary>
    ///  The same as TokenList, except that it allows the underlying string to
    ///  be directly changed.
    ///  </summary>
    public partial class SettableTokenList : TokenList
    {
        
        ///  <summary>
        ///  Gets the underlying string.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetValueAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.value; }");
        }
        
        ///  <summary>
        ///  Sets the underlying string.
        ///  </summary>
        public virtual Task SetValueAsync(String value)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.value = val; }", value);
        }
    }
    
    ///  <summary>
    ///  The Text interface represents the textual content of Element or Attr.
    ///  If an element has no markup within its content, it has a single child
    ///  implementing Text that contains the element's text.  However, if the
    ///  element contains markup, it is parsed into information items and Text
    ///  nodes that form its children.
    ///  </summary>
    public partial class Text : CharacterData
    {
        
        ///  <summary>
        ///  Breaks the node into two nodes at a specified offset.
        ///  </summary>
        ///  <param name="offset">
        ///  The point where the Node should be split.
        ///  </param>
        ///  <returns>
        ///  The freshly created Text element with the rest of the content.
        ///  </returns>
        public virtual System.Threading.Tasks.Task<Text> SplitTextAsync(Int32 offset)
        {
            return this.EvaluateFunctionHandleInternalAsync<Text>("(element, offset) => { return element.splitText(offset); }", offset);
        }
        
        ///  <summary>
        ///  Gets a string containing the text of all Text nodes logically
        ///  adjacent to this Node, concatenated in document order.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetTextAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.wholeText; }");
        }
        
        ///  <summary>
        ///  Gets the assigned slot of the current text, if any.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Element?> GetAssignedSlotAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<Element?>("(element) => { return element.assignedSlot; }");
        }
    }
    
    ///  <summary>
    ///  The CharacterData abstract interface represents a Node object that
    ///  contains characters.
    ///  </summary>
    public partial class CharacterData : Node
    {
        
        ///  <summary>
        ///  Returns a string containing the part of Data of the specified
        ///  length and starting at the specified offset.
        ///  </summary>
        ///  <param name="offset">The point where to start.</param>
        ///  <param name="count">The numbers of characters to copy.</param>
        ///  <returns>
        ///  A string that contains a subset of the characters of Data.
        ///  </returns>
        public virtual System.Threading.Tasks.Task<String> SubstringDataAsync(Int32 offset, Int32 count)
        {
            return this.EvaluateFunctionInternalAsync<String>("(element, offset, count) => { return element.substringData(offset, count); }", offset, count);
        }
        
        ///  <summary>
        ///  Appends the given value to the Data string.
        ///  </summary>
        ///  <param name="value">The text to append.</param>
        public virtual System.Threading.Tasks.Task AppendDataAsync(String value)
        {
            return this.EvaluateFunctionInternalAsync("(element, value) => { return element.appendData(value); }", value);
        }
        
        ///  <summary>
        ///  Inserts the specified characters, at the specified offset,
        ///  in the Data text.
        ///  </summary>
        ///  <param name="offset">The offset where to insert the text.</param>
        ///  <param name="value">The text to insert.</param>
        public virtual System.Threading.Tasks.Task InsertDataAsync(Int32 offset, String value)
        {
            return this.EvaluateFunctionInternalAsync("(element, offset, value) => { return element.insertData(offset, value); }", offset, value);
        }
        
        ///  <summary>
        ///  Removes the specified amount of characters, starting at
        ///  the specified offset, from the Data.
        ///  </summary>
        ///  <param name="offset">
        ///  The offset, where the removal should begin.
        ///  </param>
        ///  <param name="count">The number of characters to remove.</param>
        public virtual System.Threading.Tasks.Task DeleteDataAsync(Int32 offset, Int32 count)
        {
            return this.EvaluateFunctionInternalAsync("(element, offset, count) => { return element.deleteData(offset, count); }", offset, count);
        }
        
        ///  <summary>
        ///  Replaces the specified amount of characters, starting at the
        ///  specified offset, with the specified value.
        ///  </summary>
        ///  <param name="offset">
        ///  The offset, where the text should be inserted.
        ///  </param>
        ///  <param name="count">
        ///  The amount of characters that should be overwritten.
        ///  </param>
        ///  <param name="value">The value to insert.</param>
        public virtual System.Threading.Tasks.Task ReplaceDataAsync(Int32 offset, Int32 count, String value)
        {
            return this.EvaluateFunctionInternalAsync("(element, offset, count, value) => { return element.replaceData(offset, count, va" +
                    "lue); }", offset, count, value);
        }
        
        ///  <summary>
        ///  Inserts nodes just before the current node.
        ///  </summary>
        ///  <param name="nodes">The nodes to insert.</param>
        public virtual System.Threading.Tasks.Task BeforeAsync(Node[] nodes)
        {
            return this.EvaluateFunctionInternalAsync("(element, nodes) => { return element.before(nodes); }", nodes);
        }
        
        ///  <summary>
        ///  Inserts nodes just after the current node.
        ///  </summary>
        ///  <param name="nodes">The nodes to insert.</param>
        public virtual System.Threading.Tasks.Task AfterAsync(Node[] nodes)
        {
            return this.EvaluateFunctionInternalAsync("(element, nodes) => { return element.after(nodes); }", nodes);
        }
        
        ///  <summary>
        ///  Replaces the current node with nodes.
        ///  </summary>
        ///  <param name="nodes">The nodes to insert.</param>
        public virtual System.Threading.Tasks.Task ReplaceAsync(Node[] nodes)
        {
            return this.EvaluateFunctionInternalAsync("(element, nodes) => { return element.replace(nodes); }", nodes);
        }
        
        ///  <summary>
        ///  Removes the current node.
        ///  </summary>
        public virtual System.Threading.Tasks.Task RemoveAsync()
        {
            return this.EvaluateFunctionInternalAsync("(element) => { return element.remove(); }");
        }
        
        ///  <summary>
        ///  Gets the contained text.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetDataAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.data; }");
        }
        
        ///  <summary>
        ///  Sets the contained text.
        ///  </summary>
        public virtual Task SetDataAsync(String data)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.data = val; }", data);
        }
        
        ///  <summary>
        ///  Gets the length of the contained text.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Int32> GetLengthAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32>("(element) => { return element.length; }");
        }
        
        ///  <summary>
        ///  Gets the Element immediately following this ChildNode in its
        ///  parent's children list, or null if there is no Element in the list
        ///  following this ChildNode.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Element?> GetNextElementSiblingAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<Element?>("(element) => { return element.nextElementSibling; }");
        }
        
        ///  <summary>
        ///  Gets the Element immediately prior to this ChildNode in its
        ///  parent's children list, or null if there is no Element in the list
        ///  prior to this ChildNode.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Element?> GetPreviousElementSiblingAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<Element?>("(element) => { return element.previousElementSibling; }");
        }
    }
    
    ///  <summary>
    ///  The interface for a browsing window element.
    ///  https://developer.mozilla.org/en-US/docs/Web/API/Window
    ///  </summary>
    public partial class Window : EventTarget
    {
        
        ///  <summary>
        ///  Closes the window.
        ///  </summary>
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return this.EvaluateFunctionInternalAsync("(element) => { return element.close(); }");
        }
        
        ///  <summary>
        ///  Stops the current document from being loaded.
        ///  </summary>
        public virtual System.Threading.Tasks.Task StopAsync()
        {
            return this.EvaluateFunctionInternalAsync("(element) => { return element.stop(); }");
        }
        
        ///  <summary>
        ///  Focuses the current window.
        ///  </summary>
        public virtual System.Threading.Tasks.Task FocusAsync()
        {
            return this.EvaluateFunctionInternalAsync("(element) => { return element.focus(); }");
        }
        
        ///  <summary>
        ///  Removes the focus from the current window.
        ///  </summary>
        public virtual System.Threading.Tasks.Task BlurAsync()
        {
            return this.EvaluateFunctionInternalAsync("(element) => { return element.blur(); }");
        }
        
        ///  <summary>
        ///  Shows the messagebox with the given message.
        ///  </summary>
        ///  <param name="message">The message to display.</param>
        public virtual System.Threading.Tasks.Task AlertAsync(String message)
        {
            return this.EvaluateFunctionInternalAsync("(element, message) => { return element.alert(message); }", message);
        }
        
        ///  <summary>
        ///  Opens a confirmation box with the provided message.
        ///  </summary>
        ///  <param name="message">The message to display.</param>
        ///  <returns>
        ///  True if the message has been confirmed, otherwise false.
        ///  </returns>
        public virtual System.Threading.Tasks.Task<Boolean> ConfirmAsync(String message)
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element, message) => { return element.confirm(message); }", message);
        }
        
        ///  <summary>
        ///  Opens the print dialog for the current window.
        ///  </summary>
        public virtual System.Threading.Tasks.Task PrintAsync()
        {
            return this.EvaluateFunctionInternalAsync("(element) => { return element.print(); }");
        }
        
        ///  <summary>
        ///  Gets a reference to the document that the window contains.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Document> GetDocumentAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<Document>("(element) => { return element.document; }");
        }
        
        ///  <summary>
        ///  Gets the location of the current document.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Location> GetLocationAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<Location>("(element) => { return element.location; }");
        }
        
        ///  <summary>
        ///  Gets if the window has been closed.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetIsClosedAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.closed; }");
        }
        
        ///  <summary>
        ///  Gets the status of the window.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetStatusAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.status; }");
        }
        
        ///  <summary>
        ///  Sets the status of the window.
        ///  </summary>
        public virtual Task SetStatusAsync(String? status)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.status = val; }", status);
        }
        
        ///  <summary>
        ///  Gets the name of the window.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetNameAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.name; }");
        }
        
        ///  <summary>
        ///  Sets the name of the window.
        ///  </summary>
        public virtual Task SetNameAsync(String? name)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.name = val; }", name);
        }
        
        ///  <summary>
        ///  Gets the height of the outside of the browser window.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Int32> GetOuterHeightAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32>("(element) => { return element.outerHeight; }");
        }
        
        ///  <summary>
        ///  Gets the width of the outside of the browser window.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Int32> GetOuterWidthAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32>("(element) => { return element.outerWidth; }");
        }
        
        ///  <summary>
        ///  Gets the horizontal distance of the left border of the user's
        ///  browser from the left side of the screen.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Int32> GetScreenXAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32>("(element) => { return element.screenX; }");
        }
        
        ///  <summary>
        ///  Gets the vertical distance of the top border of the user's browser
        ///  from the top side of the screen.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Int32> GetScreenYAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32>("(element) => { return element.screenY; }");
        }
        
        ///  <summary>
        ///  Gets the proxy to the current browsing context.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Window?> GetProxyAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<Window?>("(element) => { return element.window; }");
        }
        
        ///  <summary>
        ///  Gets the user-agent information.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Navigator?> GetNavigatorAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<Navigator?>("(element) => { return element.navigator; }");
        }
        
        ///  <summary>
        ///  Gets the history of the current window.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<History?> GetHistoryAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<History?>("(element) => { return element.history; }");
        }
    }
    
    ///  <summary>
    ///  The Location interface represents the location of the object it is
    ///  linked to. Changes done on it are reflected on the object it relates
    ///  to.
    ///  </summary>
    public partial class Location : UrlUtilities
    {
        
        ///  <summary>
        ///  Loads the resource at the URL provided in parameter.
        ///  </summary>
        ///  <param name="url">The path to the resource.</param>
        public virtual System.Threading.Tasks.Task AssignAsync(String url)
        {
            return this.EvaluateFunctionInternalAsync("(element, url) => { return element.assign(url); }", url);
        }
        
        ///  <summary>
        ///  Replaces the current resource with the one at the provided URL. The
        ///  difference from the assign() method is that after using replace()
        ///  the current page will not be saved in session History, meaning the
        ///  user won't be able to use the back button to navigate to it.
        ///  </summary>
        ///  <param name="url">
        ///  The path to the resource that should replace the current resource.
        ///  </param>
        public virtual System.Threading.Tasks.Task ReplaceAsync(String url)
        {
            return this.EvaluateFunctionInternalAsync("(element, url) => { return element.replace(url); }", url);
        }
        
        ///  <summary>
        ///  Reloads the resource from the current URL.
        ///  </summary>
        public virtual System.Threading.Tasks.Task ReloadAsync()
        {
            return this.EvaluateFunctionInternalAsync("(element) => { return element.reload(); }");
        }
    }
    
    ///  <summary>
    ///  The History interface allows to manipulate the browser session history,
    ///  that is the pages visited in the tab or frame that the current page is
    ///  loaded in.
    ///  </summary>
    public partial class History : RemoteHandle
    {
        
        ///  <summary>
        ///  Loads a page from the session history, identified by its relative
        ///  location to the current page, for example -1 for the previous page
        ///  or 1 for the next page. When integerDelta is out of bounds (e.g. -1
        ///  when there are no previously visited pages in the session history),
        ///  the method doesn't do anything and doesn't raise an exception.
        ///  Calling go() without parameters or with a non-integer argument has
        ///  no effect.
        ///  </summary>
        ///  <param name="delta">The number of states to surpass.</param>
        public virtual System.Threading.Tasks.Task GoAsync(Int32 delta)
        {
            return this.EvaluateFunctionInternalAsync("(element, delta) => { return element.go(delta); }", delta);
        }
        
        ///  <summary>
        ///  Goes to the previous page in session history, the same action as
        ///  when the user clicks the browser's Back button. Equivalent to
        ///  history.go(-1).
        ///  </summary>
        public virtual System.Threading.Tasks.Task BackAsync()
        {
            return this.EvaluateFunctionInternalAsync("(element) => { return element.back(); }");
        }
        
        ///  <summary>
        ///  Goes to the next page in session history, the same action as when
        ///  the user clicks the browser's Forward button; this is equivalent to
        ///  history.go(1).
        ///  </summary>
        public virtual System.Threading.Tasks.Task ForwardAsync()
        {
            return this.EvaluateFunctionInternalAsync("(element) => { return element.forward(); }");
        }
        
        ///  <summary>
        ///  Pushes the given data onto the session history stack with the
        ///  specified title and, if provided, URL. The data is treated as
        ///  opaque by the DOM.
        ///  </summary>
        ///  <param name="data">The data to use.</param>
        ///  <param name="title">The title to take.</param>
        ///  <param name="url">The URL to consider.</param>
        public virtual System.Threading.Tasks.Task PushStateAsync(Object data, String title, String url)
        {
            return this.EvaluateFunctionInternalAsync("(element, data, title, url) => { return element.pushState(data, title, url); }", data, title, url);
        }
        
        ///  <summary>
        ///  Updates the most recent entry on the history stack to have the
        ///  specified data, title, and, if provided, URL. The data is treated
        ///  as opaque by the DOM.
        ///  </summary>
        ///  <param name="data">The data to use.</param>
        ///  <param name="title">The title to take.</param>
        ///  <param name="url">The URL to consider.</param>
        public virtual System.Threading.Tasks.Task ReplaceStateAsync(Object data, String title, String url)
        {
            return this.EvaluateFunctionInternalAsync("(element, data, title, url) => { return element.replaceState(data, title, url); }" +
                    "", data, title, url);
        }
        
        ///  <summary>
        ///  Gets the number of elements in the session history, including the
        ///  currently loaded page.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Int32> GetLengthAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32>("(element) => { return element.length; }");
        }
        
        ///  <summary>
        ///  Gets an any value representing the state at the top of the history
        ///  stack.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Object> GetStateAsync()
        {
            return this.EvaluateFunctionInternalAsync<Object>("(element) => { return element.state; }");
        }
    }
    
    ///  <summary>
    ///  Represents the navigator information of a browsing context.
    ///  </summary>
    public partial class Navigator : NavigatorId
    {
        
        ///  <summary>
        ///  Gets if the connection is established.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetIsOnlineAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.onLine; }");
        }
    }
    
    ///  <summary>
    ///  The URLUtils interface defines utility methods to work with URLs.
    ///  </summary>
    public partial class UrlUtilities : RemoteHandle
    {
        
        ///  <summary>
        ///  Gets the whole URL.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetHrefAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.href; }");
        }
        
        ///  <summary>
        ///  Sets the whole URL.
        ///  </summary>
        public virtual Task SetHrefAsync(String href)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.href = val; }", href);
        }
        
        ///  <summary>
        ///  Gets the protocol scheme of the URL, including the final
        ///  ':'.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetProtocolAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.protocol; }");
        }
        
        ///  <summary>
        ///  Sets the protocol scheme of the URL, including the final
        ///  ':'.
        ///  </summary>
        public virtual Task SetProtocolAsync(String protocol)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.protocol = val; }", protocol);
        }
        
        ///  <summary>
        ///  Gets the host, that is the hostname, a ':', and the port of
        ///  the URL.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetHostAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.host; }");
        }
        
        ///  <summary>
        ///  Sets the host, that is the hostname, a ':', and the port of
        ///  the URL.
        ///  </summary>
        public virtual Task SetHostAsync(String host)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.host = val; }", host);
        }
        
        ///  <summary>
        ///  Gets the domain of the URL.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetHostNameAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.hostname; }");
        }
        
        ///  <summary>
        ///  Sets the domain of the URL.
        ///  </summary>
        public virtual Task SetHostnameAsync(String hostname)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.hostname = val; }", hostname);
        }
        
        ///  <summary>
        ///  Gets the port number of the URL.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetPortAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.port; }");
        }
        
        ///  <summary>
        ///  Sets the port number of the URL.
        ///  </summary>
        public virtual Task SetPortAsync(String port)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.port = val; }", port);
        }
        
        ///  <summary>
        ///  Gets an initial '/' followed by the path of the URL.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetPathNameAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.pathname; }");
        }
        
        ///  <summary>
        ///  Sets an initial '/' followed by the path of the URL.
        ///  </summary>
        public virtual Task SetPathnameAsync(String pathname)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.pathname = val; }", pathname);
        }
        
        ///  <summary>
        ///  Gets a '?' followed by the parameters of the URL.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetSearchAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.search; }");
        }
        
        ///  <summary>
        ///  Sets a '?' followed by the parameters of the URL.
        ///  </summary>
        public virtual Task SetSearchAsync(String search)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.search = val; }", search);
        }
        
        ///  <summary>
        ///  Gets a '#' followed by the fragment identifier of the URL.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetHashAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.hash; }");
        }
        
        ///  <summary>
        ///  Sets a '#' followed by the fragment identifier of the URL.
        ///  </summary>
        public virtual Task SetHashAsync(String hash)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.hash = val; }", hash);
        }
        
        ///  <summary>
        ///  Gets the username specified before the domain name.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetUserNameAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.username; }");
        }
        
        ///  <summary>
        ///  Sets the username specified before the domain name.
        ///  </summary>
        public virtual Task SetUsernameAsync(String? username)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.username = val; }", username);
        }
        
        ///  <summary>
        ///  Gets the password specified before the domain name.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetPasswordAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.password; }");
        }
        
        ///  <summary>
        ///  Sets the password specified before the domain name.
        ///  </summary>
        public virtual Task SetPasswordAsync(String? password)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.password = val; }", password);
        }
        
        ///  <summary>
        ///  Gets the canonical form of the origin of the specific location.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetOriginAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.origin; }");
        }
    }
    
    ///  <summary>
    ///  Holds the user-agent information.
    ///  </summary>
    public partial class NavigatorId : RemoteHandle
    {
        
        ///  <summary>
        ///  Gets the name of the application.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetNameAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.appName; }");
        }
        
        ///  <summary>
        ///  Gets the version of the application.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetVersionAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.appVersion; }");
        }
        
        ///  <summary>
        ///  Gets the platform of the application.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetPlatformAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.platform; }");
        }
        
        ///  <summary>
        ///  Gets the full name of the user-agent.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetUserAgentAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.userAgent; }");
        }
    }
    
    ///  <summary>
    ///  Represents the a HTML element.
    ///  </summary>
    public partial class HtmlAnchorElement : HtmlElement
    {
        
        ///  <summary>
        ///  Gets the name of the target frame to which the resource applies.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetTargetAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.target; }");
        }
        
        ///  <summary>
        ///  Sets the name of the target frame to which the resource applies.
        ///  </summary>
        public virtual Task SetTargetAsync(String? target)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.target = val; }", target);
        }
        
        ///  <summary>
        ///  Gets the linked resource is intended to be downloaded rather than displayed.
        ///  The value represent the proposed name of the file. If the name is not a valid filename of the
        ///  underlying OS, the navigator will adapt it.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetDownloadAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.download; }");
        }
        
        ///  <summary>
        ///  Sets the linked resource is intended to be downloaded rather than displayed.
        ///  The value represent the proposed name of the file. If the name is not a valid filename of the
        ///  underlying OS, the navigator will adapt it.
        ///  </summary>
        public virtual Task SetDownloadAsync(String? download)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.download = val; }", download);
        }
        
        ///  <summary>
        ///  Gets the element's ping attribute as a settable list of tokens.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<SettableTokenList> GetPingAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<SettableTokenList>("(element) => { return element.ping; }");
        }
        
        ///  <summary>
        ///  Gets the rel HTML attribute, specifying the relationship
        ///  of the target object to the link object.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetRelationAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.rel; }");
        }
        
        ///  <summary>
        ///  Sets the rel HTML attribute, specifying the relationship
        ///  of the target object to the link object.
        ///  </summary>
        public virtual Task SetRelAsync(String? rel)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.rel = val; }", rel);
        }
        
        ///  <summary>
        ///  Gets the rel HTML attribute, as a list of tokens.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<TokenList> GetRelationListAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<TokenList>("(element) => { return element.relList; }");
        }
        
        ///  <summary>
        ///  Gets the language code for the linked resource.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetTargetLanguageAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.hreflang; }");
        }
        
        ///  <summary>
        ///  Sets the language code for the linked resource.
        ///  </summary>
        public virtual Task SetHreflangAsync(String? hreflang)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.hreflang = val; }", hreflang);
        }
        
        ///  <summary>
        ///  Gets the type of the resource. If present, the attribute must be a valid MIME type.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetTypeAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.type; }");
        }
        
        ///  <summary>
        ///  Gets the text of the anchor tag (same as TextContent).
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetTextAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.text; }");
        }
        
        ///  <summary>
        ///  Gets the whole URL.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetHrefAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.href; }");
        }
        
        ///  <summary>
        ///  Sets the whole URL.
        ///  </summary>
        public virtual Task SetHrefAsync(String href)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.href = val; }", href);
        }
        
        ///  <summary>
        ///  Gets the protocol scheme of the URL, including the final
        ///  ':'.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetProtocolAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.protocol; }");
        }
        
        ///  <summary>
        ///  Sets the protocol scheme of the URL, including the final
        ///  ':'.
        ///  </summary>
        public virtual Task SetProtocolAsync(String protocol)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.protocol = val; }", protocol);
        }
        
        ///  <summary>
        ///  Gets the host, that is the hostname, a ':', and the port of
        ///  the URL.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetHostAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.host; }");
        }
        
        ///  <summary>
        ///  Sets the host, that is the hostname, a ':', and the port of
        ///  the URL.
        ///  </summary>
        public virtual Task SetHostAsync(String host)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.host = val; }", host);
        }
        
        ///  <summary>
        ///  Gets the domain of the URL.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetHostNameAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.hostname; }");
        }
        
        ///  <summary>
        ///  Sets the domain of the URL.
        ///  </summary>
        public virtual Task SetHostnameAsync(String hostname)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.hostname = val; }", hostname);
        }
        
        ///  <summary>
        ///  Gets the port number of the URL.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetPortAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.port; }");
        }
        
        ///  <summary>
        ///  Sets the port number of the URL.
        ///  </summary>
        public virtual Task SetPortAsync(String port)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.port = val; }", port);
        }
        
        ///  <summary>
        ///  Gets an initial '/' followed by the path of the URL.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetPathNameAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.pathname; }");
        }
        
        ///  <summary>
        ///  Sets an initial '/' followed by the path of the URL.
        ///  </summary>
        public virtual Task SetPathnameAsync(String pathname)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.pathname = val; }", pathname);
        }
        
        ///  <summary>
        ///  Gets a '?' followed by the parameters of the URL.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetSearchAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.search; }");
        }
        
        ///  <summary>
        ///  Sets a '?' followed by the parameters of the URL.
        ///  </summary>
        public virtual Task SetSearchAsync(String search)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.search = val; }", search);
        }
        
        ///  <summary>
        ///  Gets a '#' followed by the fragment identifier of the URL.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetHashAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.hash; }");
        }
        
        ///  <summary>
        ///  Sets a '#' followed by the fragment identifier of the URL.
        ///  </summary>
        public virtual Task SetHashAsync(String hash)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.hash = val; }", hash);
        }
        
        ///  <summary>
        ///  Gets the username specified before the domain name.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetUserNameAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.username; }");
        }
        
        ///  <summary>
        ///  Sets the username specified before the domain name.
        ///  </summary>
        public virtual Task SetUsernameAsync(String? username)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.username = val; }", username);
        }
        
        ///  <summary>
        ///  Gets the password specified before the domain name.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetPasswordAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.password; }");
        }
        
        ///  <summary>
        ///  Sets the password specified before the domain name.
        ///  </summary>
        public virtual Task SetPasswordAsync(String? password)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.password = val; }", password);
        }
        
        ///  <summary>
        ///  Gets the canonical form of the origin of the specific location.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetOriginAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.origin; }");
        }
    }
    
    ///  <summary>
    ///  Represents the area HTML element.
    ///  </summary>
    public partial class HtmlAreaElement : HtmlElement
    {
        
        ///  <summary>
        ///  Gets the alternative text for the element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetAltAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.alt; }");
        }
        
        ///  <summary>
        ///  Sets the alternative text for the element.
        ///  </summary>
        public virtual Task SetAltAsync(String? alt)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.alt = val; }", alt);
        }
        
        ///  <summary>
        ///  Gets the coordinates to define the hot-spot region.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetCoordinatesAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.coords; }");
        }
        
        ///  <summary>
        ///  Sets the coordinates to define the hot-spot region.
        ///  </summary>
        public virtual Task SetCoordsAsync(String? coords)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.coords = val; }", coords);
        }
        
        ///  <summary>
        ///  Gets the shape of the hot-spot, limited to known values.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetShapeAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.shape; }");
        }
        
        ///  <summary>
        ///  Sets the shape of the hot-spot, limited to known values.
        ///  </summary>
        public virtual Task SetShapeAsync(String? shape)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.shape = val; }", shape);
        }
        
        ///  <summary>
        ///  Gets the browsing context in which to open the linked resource.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetTargetAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.target; }");
        }
        
        ///  <summary>
        ///  Sets the browsing context in which to open the linked resource.
        ///  </summary>
        public virtual Task SetTargetAsync(String? target)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.target = val; }", target);
        }
        
        ///  <summary>
        ///  Gets the linked resource is intended to be downloaded rather than displayed.
        ///  The value represent the proposed name of the file. If the name is not a valid filename of the
        ///  underlying OS, the navigator will adapt it.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetDownloadAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.download; }");
        }
        
        ///  <summary>
        ///  Sets the linked resource is intended to be downloaded rather than displayed.
        ///  The value represent the proposed name of the file. If the name is not a valid filename of the
        ///  underlying OS, the navigator will adapt it.
        ///  </summary>
        public virtual Task SetDownloadAsync(String? download)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.download = val; }", download);
        }
        
        ///  <summary>
        ///  Gets the ping HTML attribute, as a settable list of otkens.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<SettableTokenList> GetPingAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<SettableTokenList>("(element) => { return element.ping; }");
        }
        
        ///  <summary>
        ///  Gets the value indicating relationships of the
        ///  current document to the linked resource.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetRelationAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.rel; }");
        }
        
        ///  <summary>
        ///  Sets the value indicating relationships of the
        ///  current document to the linked resource.
        ///  </summary>
        public virtual Task SetRelAsync(String? rel)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.rel = val; }", rel);
        }
        
        ///  <summary>
        ///  Gets the value indicating relationships of the current
        ///  document to the linked resource, as a list of tokens.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<TokenList> GetRelationListAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<TokenList>("(element) => { return element.relList; }");
        }
        
        ///  <summary>
        ///  Gets the language of the linked resource.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetTargetLanguageAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.hreflang; }");
        }
        
        ///  <summary>
        ///  Sets the language of the linked resource.
        ///  </summary>
        public virtual Task SetHreflangAsync(String? hreflang)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.hreflang = val; }", hreflang);
        }
        
        ///  <summary>
        ///  Gets the MIME type of the linked resource.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetTypeAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.type; }");
        }
        
        ///  <summary>
        ///  Sets the MIME type of the linked resource.
        ///  </summary>
        public virtual Task SetTypeAsync(String? type)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.type = val; }", type);
        }
        
        ///  <summary>
        ///  Gets the whole URL.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetHrefAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.href; }");
        }
        
        ///  <summary>
        ///  Sets the whole URL.
        ///  </summary>
        public virtual Task SetHrefAsync(String href)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.href = val; }", href);
        }
        
        ///  <summary>
        ///  Gets the protocol scheme of the URL, including the final
        ///  ':'.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetProtocolAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.protocol; }");
        }
        
        ///  <summary>
        ///  Sets the protocol scheme of the URL, including the final
        ///  ':'.
        ///  </summary>
        public virtual Task SetProtocolAsync(String protocol)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.protocol = val; }", protocol);
        }
        
        ///  <summary>
        ///  Gets the host, that is the hostname, a ':', and the port of
        ///  the URL.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetHostAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.host; }");
        }
        
        ///  <summary>
        ///  Sets the host, that is the hostname, a ':', and the port of
        ///  the URL.
        ///  </summary>
        public virtual Task SetHostAsync(String host)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.host = val; }", host);
        }
        
        ///  <summary>
        ///  Gets the domain of the URL.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetHostNameAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.hostname; }");
        }
        
        ///  <summary>
        ///  Sets the domain of the URL.
        ///  </summary>
        public virtual Task SetHostnameAsync(String hostname)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.hostname = val; }", hostname);
        }
        
        ///  <summary>
        ///  Gets the port number of the URL.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetPortAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.port; }");
        }
        
        ///  <summary>
        ///  Sets the port number of the URL.
        ///  </summary>
        public virtual Task SetPortAsync(String port)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.port = val; }", port);
        }
        
        ///  <summary>
        ///  Gets an initial '/' followed by the path of the URL.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetPathNameAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.pathname; }");
        }
        
        ///  <summary>
        ///  Sets an initial '/' followed by the path of the URL.
        ///  </summary>
        public virtual Task SetPathnameAsync(String pathname)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.pathname = val; }", pathname);
        }
        
        ///  <summary>
        ///  Gets a '?' followed by the parameters of the URL.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetSearchAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.search; }");
        }
        
        ///  <summary>
        ///  Sets a '?' followed by the parameters of the URL.
        ///  </summary>
        public virtual Task SetSearchAsync(String search)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.search = val; }", search);
        }
        
        ///  <summary>
        ///  Gets a '#' followed by the fragment identifier of the URL.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetHashAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.hash; }");
        }
        
        ///  <summary>
        ///  Sets a '#' followed by the fragment identifier of the URL.
        ///  </summary>
        public virtual Task SetHashAsync(String hash)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.hash = val; }", hash);
        }
        
        ///  <summary>
        ///  Gets the username specified before the domain name.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetUserNameAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.username; }");
        }
        
        ///  <summary>
        ///  Sets the username specified before the domain name.
        ///  </summary>
        public virtual Task SetUsernameAsync(String? username)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.username = val; }", username);
        }
        
        ///  <summary>
        ///  Gets the password specified before the domain name.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetPasswordAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.password; }");
        }
        
        ///  <summary>
        ///  Sets the password specified before the domain name.
        ///  </summary>
        public virtual Task SetPasswordAsync(String? password)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.password = val; }", password);
        }
        
        ///  <summary>
        ///  Gets the canonical form of the origin of the specific location.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetOriginAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.origin; }");
        }
    }
    
    ///  <summary>
    ///  Represents the base HTML element.
    ///  </summary>
    public partial class HtmlBaseElement : HtmlElement
    {
        
        ///  <summary>
        ///  Gets the hyperreference to the base URL.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetHrefAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.href; }");
        }
        
        ///  <summary>
        ///  Sets the hyperreference to the base URL.
        ///  </summary>
        public virtual Task SetHrefAsync(String? href)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.href = val; }", href);
        }
        
        ///  <summary>
        ///  Gets the base target.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetTargetAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.target; }");
        }
        
        ///  <summary>
        ///  Sets the base target.
        ///  </summary>
        public virtual Task SetTargetAsync(String? target)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.target = val; }", target);
        }
    }
    
    ///  <summary>
    ///  Represents the body HTML element.
    ///  </summary>
    public partial class HtmlBodyElement : HtmlElement
    {
    }
    
    ///  <summary>
    ///  Represents the br HTML element.
    ///  </summary>
    public partial class HtmlBreakRowElement : HtmlElement
    {
    }
    
    ///  <summary>
    ///  Represents the button HTML element.
    ///  </summary>
    public partial class HtmlButtonElement : HtmlElement
    {
        
        ///  <summary>
        ///  Checks the validity of the current element.
        ///  </summary>
        ///  <returns>True if the object is valid, otherwise false.</returns>
        public virtual System.Threading.Tasks.Task<Boolean> CheckValidityAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.checkValidity(); }");
        }
        
        ///  <summary>
        ///  Sets a custom validation error. If this is not the empty string,
        ///  then the element is suffering from a custom validation error.
        ///  </summary>
        ///  <param name="error">The error message to use.</param>
        public virtual System.Threading.Tasks.Task SetCustomValidityAsync(String error)
        {
            return this.EvaluateFunctionInternalAsync("(element, error) => { return element.setCustomValidity(error); }", error);
        }
        
        ///  <summary>
        ///  Gets the autofocus HTML attribute, which indicates whether the
        ///  control should have input focus when the page loads.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetAutofocusAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.autofocus; }");
        }
        
        ///  <summary>
        ///  Sets the autofocus HTML attribute, which indicates whether the
        ///  control should have input focus when the page loads.
        ///  </summary>
        public virtual Task SetAutofocusAsync(Boolean autofocus)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.autofocus = val; }", autofocus);
        }
        
        ///  <summary>
        ///  Gets if the button is enabled or disabled.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetDisabledAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.disabled; }");
        }
        
        ///  <summary>
        ///  Sets if the button is enabled or disabled.
        ///  </summary>
        public virtual Task SetDisabledAsync(Boolean disabled)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.disabled = val; }", disabled);
        }
        
        ///  <summary>
        ///  Gets the associated HTML form element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<HtmlFormElement?> GetFormAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlFormElement?>("(element) => { return element.form; }");
        }
        
        ///  <summary>
        ///  Gets the list of assigned labels.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<NodeList> GetLabelsAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<NodeList>("(element) => { return element.labels; }");
        }
        
        ///  <summary>
        ///  Gets the name of the element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetNameAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.name; }");
        }
        
        ///  <summary>
        ///  Sets the name of the element.
        ///  </summary>
        public virtual Task SetNameAsync(String? name)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.name = val; }", name);
        }
        
        ///  <summary>
        ///  Gets the type of button.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<HtmlButtonElementType> GetTypeAsync()
        {
            return this.EvaluateFunctionInternalAsync<HtmlButtonElementType>("(element) => { return element.type; }");
        }
        
        ///  <summary>
        ///  Sets the type of button.
        ///  </summary>
        public virtual Task SetTypeAsync(HtmlButtonElementType type)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.type = val; }", type);
        }
        
        ///  <summary>
        ///  Gets the value.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetValueAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.value; }");
        }
        
        ///  <summary>
        ///  Sets the value.
        ///  </summary>
        public virtual Task SetValueAsync(String value)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.value = val; }", value);
        }
        
        ///  <summary>
        ///  Gets the URI of a resource that processes information submitted by the button.
        ///  If specified, this attribute overrides the action attribute of the form element that owns this element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetFormActionAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.formAction; }");
        }
        
        ///  <summary>
        ///  Sets the URI of a resource that processes information submitted by the button.
        ///  If specified, this attribute overrides the action attribute of the form element that owns this element.
        ///  </summary>
        public virtual Task SetFormActionAsync(String? formAction)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.formAction = val; }", formAction);
        }
        
        ///  <summary>
        ///  Gets the type of content that is used to submit the form to the server. If specified, this
        ///  attribute overrides the enctype attribute of the form element that owns this element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetFormEncTypeAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.formEncType; }");
        }
        
        ///  <summary>
        ///  Sets the type of content that is used to submit the form to the server. If specified, this
        ///  attribute overrides the enctype attribute of the form element that owns this element.
        ///  </summary>
        public virtual Task SetFormEncTypeAsync(String formEncType)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.formEncType = val; }", formEncType);
        }
        
        ///  <summary>
        ///  Gets the HTTP method that the browser uses to submit the form. If specified, this attribute
        ///  overrides the method attribute of the form element that owns this element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetFormMethodAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.formMethod; }");
        }
        
        ///  <summary>
        ///  Sets the HTTP method that the browser uses to submit the form. If specified, this attribute
        ///  overrides the method attribute of the form element that owns this element.
        ///  </summary>
        public virtual Task SetFormMethodAsync(String formMethod)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.formMethod = val; }", formMethod);
        }
        
        ///  <summary>
        ///  Gets that the form is not to be validated when it is submitted. If specified, this attribute
        ///  overrides the enctype attribute of the form element that owns this element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetFormNoValidateAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.formNoValidate; }");
        }
        
        ///  <summary>
        ///  Sets that the form is not to be validated when it is submitted. If specified, this attribute
        ///  overrides the enctype attribute of the form element that owns this element.
        ///  </summary>
        public virtual Task SetFormNoValidateAsync(Boolean formNoValidate)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.formNoValidate = val; }", formNoValidate);
        }
        
        ///  <summary>
        ///  Gets A name or keyword indicating where to display the response that is received after submitting
        ///  the form. If specified, this attribute overrides the target attribute of the form element that owns this element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetFormTargetAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.formTarget; }");
        }
        
        ///  <summary>
        ///  Sets A name or keyword indicating where to display the response that is received after submitting
        ///  the form. If specified, this attribute overrides the target attribute of the form element that owns this element.
        ///  </summary>
        public virtual Task SetFormTargetAsync(String? formTarget)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.formTarget = val; }", formTarget);
        }
        
        ///  <summary>
        ///  Gets a value if the current element validates.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetWillValidateAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.willValidate; }");
        }
        
        ///  <summary>
        ///  Gets the current validation state of the current element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<ValidityState> GetValidityAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<ValidityState>("(element) => { return element.validity; }");
        }
        
        ///  <summary>
        ///  Gets the current validation message.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetValidationMessageAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.validationMessage; }");
        }
    }
    
    ///  <summary>
    ///  Represents the command HTML element.
    ///  </summary>
    public partial class HtmlCommandElement : HtmlElement
    {
        
        ///  <summary>
        ///  Gets the type of command.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetTypeAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.type; }");
        }
        
        ///  <summary>
        ///  Sets the type of command.
        ///  </summary>
        public virtual Task SetTypeAsync(String? type)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.type = val; }", type);
        }
        
        ///  <summary>
        ///  Gets the assigned label.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetLabelAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.label; }");
        }
        
        ///  <summary>
        ///  Sets the assigned label.
        ///  </summary>
        public virtual Task SetLabelAsync(String? label)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.label = val; }", label);
        }
        
        ///  <summary>
        ///  Gets the icon of the command.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetIconAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.icon; }");
        }
        
        ///  <summary>
        ///  Sets the icon of the command.
        ///  </summary>
        public virtual Task SetIconAsync(String? icon)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.icon = val; }", icon);
        }
        
        ///  <summary>
        ///  Gets if the command is disabled.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetDisabledAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.disabled; }");
        }
        
        ///  <summary>
        ///  Sets if the command is disabled.
        ///  </summary>
        public virtual Task SetDisabledAsync(Boolean disabled)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.disabled = val; }", disabled);
        }
        
        ///  <summary>
        ///  Gets if the command is checked.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetCheckedAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.checked; }");
        }
        
        ///  <summary>
        ///  Sets if the command is checked.
        ///  </summary>
        public virtual Task SetCheckedAsync(Boolean @checked)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.checked = val; }", @checked);
        }
        
        ///  <summary>
        ///  Gets the id of the radio group of the command.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetRadioGroupAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.radiogroup; }");
        }
        
        ///  <summary>
        ///  Sets the id of the radio group of the command.
        ///  </summary>
        public virtual Task SetRadiogroupAsync(String? radiogroup)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.radiogroup = val; }", radiogroup);
        }
        
        ///  <summary>
        ///  Gets the assigned element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<HtmlElement> GetCommandAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlElement>("(element) => { return element.command; }");
        }
    }
    
    ///  <summary>
    ///  Represents the data HTML element.
    ///  </summary>
    public partial class HtmlDataElement : HtmlElement
    {
        
        ///  <summary>
        ///  Gets the machine readable value.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetValueAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.value; }");
        }
        
        ///  <summary>
        ///  Sets the machine readable value.
        ///  </summary>
        public virtual Task SetValueAsync(String? value)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.value = val; }", value);
        }
    }
    
    ///  <summary>
    ///  Represents the datalist HTML element.
    ///  </summary>
    public partial class HtmlDataListElement : HtmlElement
    {
        
        ///  <summary>
        ///  Gets the associated options.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<HtmlCollection<HtmlOptionElement>> GetOptionsAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlCollection<HtmlOptionElement>>("(element) => { return element.options; }");
        }
    }
    
    ///  <summary>
    ///  Represents the details HTML element.
    ///  </summary>
    public partial class HtmlDetailsElement : HtmlElement
    {
        
        ///  <summary>
        ///  Gets if the element is opened.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetIsOpenAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.open; }");
        }
        
        ///  <summary>
        ///  Sets if the element is opened.
        ///  </summary>
        public virtual Task SetOpenAsync(Boolean open)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.open = val; }", open);
        }
    }
    
    ///  <summary>
    ///  Repesents the dialog HTML element.
    ///  </summary>
    public partial class HtmlDialogElement : HtmlElement
    {
        
        ///  <summary>
        ///  Shows the dialog, optionally anchored to the element.
        ///  </summary>
        ///  <param name="anchor">The element, where the dialog is anchored.</param>
        public virtual System.Threading.Tasks.Task ShowAsync(Element? anchor)
        {
            return this.EvaluateFunctionInternalAsync("(element, anchor) => { return element.show(anchor); }", anchor);
        }
        
        ///  <summary>
        ///  Shows the dialog modally, optionally anchored to the element.
        ///  </summary>
        ///  <param name="anchor">The element, where the dialog is anchored.</param>
        public virtual System.Threading.Tasks.Task ShowModalAsync(Element? anchor)
        {
            return this.EvaluateFunctionInternalAsync("(element, anchor) => { return element.showModal(anchor); }", anchor);
        }
        
        ///  <summary>
        ///  Closes the dialog.
        ///  </summary>
        ///  <param name="returnValue">The return value to set.</param>
        public virtual System.Threading.Tasks.Task CloseAsync(String returnValue)
        {
            return this.EvaluateFunctionInternalAsync("(element, returnValue) => { return element.close(returnValue); }", returnValue);
        }
        
        ///  <summary>
        ///  Gets if the dialog is open.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetOpenAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.open; }");
        }
        
        ///  <summary>
        ///  Sets if the dialog is open.
        ///  </summary>
        public virtual Task SetOpenAsync(Boolean open)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.open = val; }", open);
        }
        
        ///  <summary>
        ///  Gets the return value of the dialog.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetReturnValueAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.returnValue; }");
        }
        
        ///  <summary>
        ///  Sets the return value of the dialog.
        ///  </summary>
        public virtual Task SetReturnValueAsync(String? returnValue)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.returnValue = val; }", returnValue);
        }
    }
    
    ///  <summary>
    ///  Represents the div HTML element.
    ///  </summary>
    public partial class HtmlDivElement : HtmlElement
    {
    }
    
    ///  <summary>
    ///  Serves as an entry point to the content of an HTML document.
    ///  </summary>
    public partial class HtmlDocument : Document
    {
    }
    
    ///  <summary>
    ///  The HTMLElement interface represents any HTML element. Some elements directly
    ///  implement this interface, other implement it via an interface that inherit it.
    ///  </summary>
    public partial class HtmlElement : Element
    {
        
        ///  <summary>
        ///  Simulates a mouse click on an element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task InvokeClickAsync()
        {
            return this.EvaluateFunctionInternalAsync("(element) => { return element.click(); }");
        }
        
        ///  <summary>
        ///  Puts the keyboard focus on the given element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task FocusAsync()
        {
            return this.EvaluateFunctionInternalAsync("(element) => { return element.focus(); }");
        }
        
        ///  <summary>
        ///  Removes the keyboard focus on the given element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task BlurAsync()
        {
            return this.EvaluateFunctionInternalAsync("(element) => { return element.blur(); }");
        }
        
        ///  <summary>
        ///  Forces the invocation of a spell check on the content.
        ///  </summary>
        public virtual System.Threading.Tasks.Task ForceSpellCheckAsync()
        {
            return this.EvaluateFunctionInternalAsync("(element) => { return element.forceSpellCheck(); }");
        }
        
        ///  <summary>
        ///  Gets the value of the lang attribute.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetLanguageAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.lang; }");
        }
        
        ///  <summary>
        ///  Sets the value of the lang attribute.
        ///  </summary>
        public virtual Task SetLangAsync(String? lang)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.lang = val; }", lang);
        }
        
        ///  <summary>
        ///  Gets the value of the title attribute.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetTitleAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.title; }");
        }
        
        ///  <summary>
        ///  Sets the value of the title attribute.
        ///  </summary>
        public virtual Task SetTitleAsync(String? title)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.title = val; }", title);
        }
        
        ///  <summary>
        ///  Gets the value of the dir attribute.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetDirectionAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.dir; }");
        }
        
        ///  <summary>
        ///  Sets the value of the dir attribute.
        ///  </summary>
        public virtual Task SetDirAsync(String? dir)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.dir = val; }", dir);
        }
        
        ///  <summary>
        ///  Gets access to all the custom data attributes (data-*) set on the element. It is a map of DOMString,
        ///  one entry for each custom data attribute.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<StringMap> GetDatasetAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<StringMap>("(element) => { return element.dataset; }");
        }
        
        ///  <summary>
        ///  Gets if the element should be translated.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetIsTranslatedAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.translate; }");
        }
        
        ///  <summary>
        ///  Sets if the element should be translated.
        ///  </summary>
        public virtual Task SetTranslateAsync(Boolean translate)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.translate = val; }", translate);
        }
        
        ///  <summary>
        ///  Gets the position of the element in the tabbing order.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Int32> GetTabIndexAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32>("(element) => { return element.tabIndex; }");
        }
        
        ///  <summary>
        ///  Sets the position of the element in the tabbing order.
        ///  </summary>
        public virtual Task SetTabIndexAsync(Int32 tabIndex)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.tabIndex = val; }", tabIndex);
        }
        
        ///  <summary>
        ///  Gets if spell-checking is activated.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetIsSpellCheckedAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.spellcheck; }");
        }
        
        ///  <summary>
        ///  Sets if spell-checking is activated.
        ///  </summary>
        public virtual Task SetSpellcheckAsync(Boolean spellcheck)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.spellcheck = val; }", spellcheck);
        }
        
        ///  <summary>
        ///  Gets whether or not the element is editable. This enumerated
        ///  attribute can have the values true, false and inherited.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetContentEditableAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.contentEditable; }");
        }
        
        ///  <summary>
        ///  Sets whether or not the element is editable. This enumerated
        ///  attribute can have the values true, false and inherited.
        ///  </summary>
        public virtual Task SetContentEditableAsync(String? contentEditable)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.contentEditable = val; }", contentEditable);
        }
        
        ///  <summary>
        ///  Gets if the element is currently contenteditable.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetIsContentEditableAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.isContentEditable; }");
        }
        
        ///  <summary>
        ///  Gets if the element is hidden.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetIsHiddenAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.hidden; }");
        }
        
        ///  <summary>
        ///  Sets if the element is hidden.
        ///  </summary>
        public virtual Task SetHiddenAsync(Boolean hidden)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.hidden = val; }", hidden);
        }
        
        ///  <summary>
        ///  Gets if the element is draggable.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetIsDraggableAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.draggable; }");
        }
        
        ///  <summary>
        ///  Sets if the element is draggable.
        ///  </summary>
        public virtual Task SetDraggableAsync(Boolean draggable)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.draggable = val; }", draggable);
        }
        
        ///  <summary>
        ///  Gets the access key assigned to the element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetAccessKeyAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.accessKey; }");
        }
        
        ///  <summary>
        ///  Sets the access key assigned to the element.
        ///  </summary>
        public virtual Task SetAccessKeyAsync(String? accessKey)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.accessKey = val; }", accessKey);
        }
        
        ///  <summary>
        ///  Gets the element's assigned access key.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetAccessKeyLabelAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.accessKeyLabel; }");
        }
        
        ///  <summary>
        ///  Gets the assigned context menu.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<HtmlMenuElement?> GetContextMenuAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlMenuElement?>("(element) => { return element.contextMenu; }");
        }
        
        ///  <summary>
        ///  Sets the assigned context menu.
        ///  </summary>
        public virtual Task SetContextMenuAsync(HtmlMenuElement? contextMenu)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.contextMenu = val; }", contextMenu);
        }
        
        ///  <summary>
        ///  Gets the dropzone for this element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<SettableTokenList> GetDropZoneAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<SettableTokenList>("(element) => { return element.dropzone; }");
        }
    }
    
    ///  <summary>
    ///  The embed HTML element.
    ///  </summary>
    public partial class HtmlEmbedElement : HtmlElement
    {
        
        ///  <summary>
        ///  Gets the source of the object to embed.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetSrcAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.src; }");
        }
        
        ///  <summary>
        ///  Sets the source of the object to embed.
        ///  </summary>
        public virtual Task SetSrcAsync(String? src)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.src = val; }", src);
        }
        
        ///  <summary>
        ///  Gets the type of the embedded object.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetTypeAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.type; }");
        }
        
        ///  <summary>
        ///  Sets the type of the embedded object.
        ///  </summary>
        public virtual Task SetTypeAsync(String? type)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.type = val; }", type);
        }
        
        ///  <summary>
        ///  Gets the display width of the object.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetWidthAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.width; }");
        }
        
        ///  <summary>
        ///  Sets the display width of the object.
        ///  </summary>
        public virtual Task SetWidthAsync(String? width)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.width = val; }", width);
        }
        
        ///  <summary>
        ///  Gets the display height of the object.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetHeightAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.height; }");
        }
        
        ///  <summary>
        ///  Sets the display height of the object.
        ///  </summary>
        public virtual Task SetHeightAsync(String? height)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.height = val; }", height);
        }
    }
    
    ///  <summary>
    ///  Represents the fieldset HTML element.
    ///  </summary>
    public partial class HtmlFieldSetElement : HtmlElement
    {
        
        ///  <summary>
        ///  Checks the validity of the current element.
        ///  </summary>
        ///  <returns>True if the object is valid, otherwise false.</returns>
        public virtual System.Threading.Tasks.Task<Boolean> CheckValidityAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.checkValidity(); }");
        }
        
        ///  <summary>
        ///  Sets a custom validation error. If this is not the empty string,
        ///  then the element is suffering from a custom validation error.
        ///  </summary>
        ///  <param name="error">The error message to use.</param>
        public virtual System.Threading.Tasks.Task SetCustomValidityAsync(String error)
        {
            return this.EvaluateFunctionInternalAsync("(element, error) => { return element.setCustomValidity(error); }", error);
        }
        
        ///  <summary>
        ///  Gets if the element is enabled or disabled.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetDisabledAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.disabled; }");
        }
        
        ///  <summary>
        ///  Sets if the element is enabled or disabled.
        ///  </summary>
        public virtual Task SetDisabledAsync(Boolean disabled)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.disabled = val; }", disabled);
        }
        
        ///  <summary>
        ///  Gets the associated HTML form element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<HtmlFormElement?> GetFormAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlFormElement?>("(element) => { return element.form; }");
        }
        
        ///  <summary>
        ///  Gets the value of the name attribute.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetNameAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.name; }");
        }
        
        ///  <summary>
        ///  Sets the value of the name attribute.
        ///  </summary>
        public virtual Task SetNameAsync(String? name)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.name = val; }", name);
        }
        
        ///  <summary>
        ///  Gets the type of input control (fieldset).
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetTypeAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.type; }");
        }
        
        ///  <summary>
        ///  Gets the elements belonging to this field set.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<HtmlFormControlsCollection> GetElementsAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlFormControlsCollection>("(element) => { return element.elements; }");
        }
        
        ///  <summary>
        ///  Gets a value if the current element validates.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetWillValidateAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.willValidate; }");
        }
        
        ///  <summary>
        ///  Gets the current validation state of the current element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<ValidityState> GetValidityAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<ValidityState>("(element) => { return element.validity; }");
        }
        
        ///  <summary>
        ///  Gets the current validation message.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetValidationMessageAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.validationMessage; }");
        }
    }
    
    ///  <summary>
    ///  Represents a collection of HTML form controls.
    ///  </summary>
    public partial class HtmlFormControlsCollection : HtmlCollection<HtmlElement>
    {
    }
    
    ///  <summary>
    ///  Represents the form HTML element.
    ///  </summary>
    public partial class HtmlFormElement : HtmlElement
    {
        
        ///  <summary>
        ///  Submits the form element from the form element itself.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Document> SubmitAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<Document>("(element) => { return element.submit(); }");
        }
        
        ///  <summary>
        ///  Resets the form to the previous (default) state.
        ///  </summary>
        public virtual System.Threading.Tasks.Task ResetAsync()
        {
            return this.EvaluateFunctionInternalAsync("(element) => { return element.reset(); }");
        }
        
        ///  <summary>
        ///  Checks if the form is valid, i.e. if all fields fulfill their requirements.
        ///  </summary>
        ///  <returns>True if the form is valid, otherwise false.</returns>
        public virtual System.Threading.Tasks.Task<Boolean> CheckValidityAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.checkValidity(); }");
        }
        
        ///  <summary>
        ///  Reports the current validity state after checking the current state
        ///  interactively the constraints of the form element.
        ///  </summary>
        ///  <returns>True if the form element is valid, otherwise false.</returns>
        public virtual System.Threading.Tasks.Task<Boolean> ReportValidityAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.reportValidity(); }");
        }
        
        ///  <summary>
        ///  Requests the input fields to be automatically filled with previous entries.
        ///  </summary>
        public virtual System.Threading.Tasks.Task RequestAutocompleteAsync()
        {
            return this.EvaluateFunctionInternalAsync("(element) => { return element.requestAutocomplete(); }");
        }
        
        ///  <summary>
        ///  Gets the character encodings that are to be used for the submission.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetAcceptCharsetAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.acceptCharset; }");
        }
        
        ///  <summary>
        ///  Sets the character encodings that are to be used for the submission.
        ///  </summary>
        public virtual Task SetAcceptCharsetAsync(String? acceptCharset)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.acceptCharset = val; }", acceptCharset);
        }
        
        ///  <summary>
        ///  Gets the form's name within the forms collection.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetActionAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.action; }");
        }
        
        ///  <summary>
        ///  Sets the form's name within the forms collection.
        ///  </summary>
        public virtual Task SetActionAsync(String action)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.action = val; }", action);
        }
        
        ///  <summary>
        ///  Gets if autocomplete is turned on or off.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetAutocompleteAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.autocomplete; }");
        }
        
        ///  <summary>
        ///  Sets if autocomplete is turned on or off.
        ///  </summary>
        public virtual Task SetAutocompleteAsync(String? autocomplete)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.autocomplete = val; }", autocomplete);
        }
        
        ///  <summary>
        ///  Gets the encoding to use for sending the form.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetEnctypeAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.enctype; }");
        }
        
        ///  <summary>
        ///  Sets the encoding to use for sending the form.
        ///  </summary>
        public virtual Task SetEnctypeAsync(String? enctype)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.enctype = val; }", enctype);
        }
        
        ///  <summary>
        ///  Gets the encoding to use for sending the form.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetEncodingAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.encoding; }");
        }
        
        ///  <summary>
        ///  Sets the encoding to use for sending the form.
        ///  </summary>
        public virtual Task SetEncodingAsync(String encoding)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.encoding = val; }", encoding);
        }
        
        ///  <summary>
        ///  Gets the method to use for transmitting the form.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetMethodAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.method; }");
        }
        
        ///  <summary>
        ///  Sets the method to use for transmitting the form.
        ///  </summary>
        public virtual Task SetMethodAsync(String method)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.method = val; }", method);
        }
        
        ///  <summary>
        ///  Gets the value of the name attribute.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetNameAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.name; }");
        }
        
        ///  <summary>
        ///  Sets the value of the name attribute.
        ///  </summary>
        public virtual Task SetNameAsync(String? name)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.name = val; }", name);
        }
        
        ///  <summary>
        ///  Gets the indicator that the form is not to be validated during submission.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetNoValidateAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.noValidate; }");
        }
        
        ///  <summary>
        ///  Sets the indicator that the form is not to be validated during submission.
        ///  </summary>
        public virtual Task SetNoValidateAsync(Boolean noValidate)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.noValidate = val; }", noValidate);
        }
        
        ///  <summary>
        ///  Gets the target name of the response to the request.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetTargetAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.target; }");
        }
        
        ///  <summary>
        ///  Sets the target name of the response to the request.
        ///  </summary>
        public virtual Task SetTargetAsync(String target)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.target = val; }", target);
        }
        
        ///  <summary>
        ///  Gets the number of elements in the Elements collection.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Int32> GetLengthAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32>("(element) => { return element.length; }");
        }
        
        ///  <summary>
        ///  Gets all the form controls belonging to this form element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<HtmlFormControlsCollection> GetElementsAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlFormControlsCollection>("(element) => { return element.elements; }");
        }
    }
    
    ///  <summary>
    ///  Represents the head HTML element.
    ///  </summary>
    public partial class HtmlHeadElement : HtmlElement
    {
    }
    
    ///  <summary>
    ///  Represents the heading HTML element(s).
    ///  </summary>
    public partial class HtmlHeadingElement : HtmlElement
    {
    }
    
    ///  <summary>
    ///  Represents the hr HTML element.
    ///  </summary>
    public partial class HtmlHrElement : HtmlElement
    {
    }
    
    ///  <summary>
    ///  Represents the html HTML element.
    ///  </summary>
    public partial class HtmlHtmlElement : HtmlElement
    {
        
        ///  <summary>
        ///  Gets the value of the manifest attribute.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetManifestAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.manifest; }");
        }
        
        ///  <summary>
        ///  Sets the value of the manifest attribute.
        ///  </summary>
        public virtual Task SetManifestAsync(String? manifest)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.manifest = val; }", manifest);
        }
    }
    
    ///  <summary>
    ///  Represents the image HTML element.
    ///  </summary>
    public partial class HtmlImageElement : HtmlElement
    {
        
        ///  <summary>
        ///  Gets the alternative text.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetAltAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.alt; }");
        }
        
        ///  <summary>
        ///  Sets the alternative text.
        ///  </summary>
        public virtual Task SetAltAsync(String? alt)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.alt = val; }", alt);
        }
        
        ///  <summary>
        ///  Gets the actual used image source.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetCurrentSrcAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.currentSrc; }");
        }
        
        ///  <summary>
        ///  Gets the image source.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetSrcAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.src; }");
        }
        
        ///  <summary>
        ///  Sets the image source.
        ///  </summary>
        public virtual Task SetSrcAsync(String? src)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.src = val; }", src);
        }
        
        ///  <summary>
        ///  Gets the image candidates for higher density images.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetSourceSetAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.srcset; }");
        }
        
        ///  <summary>
        ///  Sets the image candidates for higher density images.
        ///  </summary>
        public virtual Task SetSrcsetAsync(String? srcset)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.srcset = val; }", srcset);
        }
        
        ///  <summary>
        ///  Gets the sizes to responsively.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetSizesAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.sizes; }");
        }
        
        ///  <summary>
        ///  Sets the sizes to responsively.
        ///  </summary>
        public virtual Task SetSizesAsync(String? sizes)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.sizes = val; }", sizes);
        }
        
        ///  <summary>
        ///  Gets the cross-origin attribute.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetCrossOriginAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.crossOrigin; }");
        }
        
        ///  <summary>
        ///  Sets the cross-origin attribute.
        ///  </summary>
        public virtual Task SetCrossOriginAsync(String? crossOrigin)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.crossOrigin = val; }", crossOrigin);
        }
        
        ///  <summary>
        ///  Gets the usemap attribute, which indicates that the image
        ///  has an associated image map.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetUseMapAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.useMap; }");
        }
        
        ///  <summary>
        ///  Sets the usemap attribute, which indicates that the image
        ///  has an associated image map.
        ///  </summary>
        public virtual Task SetUseMapAsync(String? useMap)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.useMap = val; }", useMap);
        }
        
        ///  <summary>
        ///  Gets if the image element is a map. The attribute must not
        ///  be specified on an element that does not have an ancestor a
        ///  element with an href attribute.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetIsMapAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.isMap; }");
        }
        
        ///  <summary>
        ///  Sets if the image element is a map. The attribute must not
        ///  be specified on an element that does not have an ancestor a
        ///  element with an href attribute.
        ///  </summary>
        public virtual Task SetIsMapAsync(Boolean isMap)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.isMap = val; }", isMap);
        }
        
        ///  <summary>
        ///  Gets the displayed width of the image element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Int32> GetWidthAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32>("(element) => { return element.width; }");
        }
        
        ///  <summary>
        ///  Sets the displayed width of the image element.
        ///  </summary>
        public virtual Task SetWidthAsync(Int32 width)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.width = val; }", width);
        }
        
        ///  <summary>
        ///  Gets the displayed width of the image element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Int32> GetHeightAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32>("(element) => { return element.height; }");
        }
        
        ///  <summary>
        ///  Sets the displayed width of the image element.
        ///  </summary>
        public virtual Task SetHeightAsync(Int32 height)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.height = val; }", height);
        }
        
        ///  <summary>
        ///  Gets the width of the image.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Int32> GetOriginalWidthAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32>("(element) => { return element.naturalWidth; }");
        }
        
        ///  <summary>
        ///  Gets the height of the image.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Int32> GetOriginalHeightAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32>("(element) => { return element.naturalHeight; }");
        }
        
        ///  <summary>
        ///  Gets if the image is completely available.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetcompleteAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.complete; }");
        }
    }
    
    ///  <summary>
    ///  Represents the iframe HTML element.
    ///  </summary>
    public partial class HtmlInlineFrameElement : HtmlElement
    {
        
        ///  <summary>
        ///  Gets the frame source.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetSrcAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.src; }");
        }
        
        ///  <summary>
        ///  Sets the frame source.
        ///  </summary>
        public virtual Task SetSrcAsync(String? src)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.src = val; }", src);
        }
        
        ///  <summary>
        ///  Gets the content of the page that the nested browsing context is to contain.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetContentHtmlAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.srcdoc; }");
        }
        
        ///  <summary>
        ///  Gets the content of the page that the nested browsing context is to contain.
        ///  </summary>
        public virtual Task SetSrcdocAsync(String? srcdoc)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.srcdoc = val; }", srcdoc);
        }
        
        ///  <summary>
        ///  Gets the name of the frame.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetNameAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.name; }");
        }
        
        ///  <summary>
        ///  Sets the name of the frame.
        ///  </summary>
        public virtual Task SetNameAsync(String? name)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.name = val; }", name);
        }
        
        ///  <summary>
        ///  Gets the tokens of the sandbox attribute.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<SettableTokenList> GetSandboxAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<SettableTokenList>("(element) => { return element.sandbox; }");
        }
        
        ///  <summary>
        ///  Gets if the seamless attribute has been set.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetIsSeamlessAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.seamless; }");
        }
        
        ///  <summary>
        ///  Sets if the seamless attribute has been set.
        ///  </summary>
        public virtual Task SetSeamlessAsync(Boolean seamless)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.seamless = val; }", seamless);
        }
        
        ///  <summary>
        ///  Gets if the frame's content can trigger the fullscreen mode.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetIsFullscreenAllowedAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.allowFullscreen; }");
        }
        
        ///  <summary>
        ///  Sets if the frame's content can trigger the fullscreen mode.
        ///  </summary>
        public virtual Task SetAllowFullscreenAsync(Boolean allowFullscreen)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.allowFullscreen = val; }", allowFullscreen);
        }
        
        ///  <summary>
        ///  Gets if the frame's content can trigger a payment request.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetIsPaymentRequestAllowedAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.allowPaymentRequest; }");
        }
        
        ///  <summary>
        ///  Sets if the frame's content can trigger a payment request.
        ///  </summary>
        public virtual Task SetAllowPaymentRequestAsync(Boolean allowPaymentRequest)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.allowPaymentRequest = val; }", allowPaymentRequest);
        }
        
        ///  <summary>
        ///  Gets the frame's referrer policy.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetReferrerPolicyAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.referrerPolicy; }");
        }
        
        ///  <summary>
        ///  Sets the frame's referrer policy.
        ///  </summary>
        public virtual Task SetReferrerPolicyAsync(String? referrerPolicy)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.referrerPolicy = val; }", referrerPolicy);
        }
        
        ///  <summary>
        ///  Gets the display width of the frame.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Int32> GetWidthAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32>("(element) => { return element.width; }");
        }
        
        ///  <summary>
        ///  Sets the display width of the frame.
        ///  </summary>
        public virtual Task SetWidthAsync(Int32 width)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.width = val; }", width);
        }
        
        ///  <summary>
        ///  Gets the display height of the frame.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Int32> GetHeightAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32>("(element) => { return element.height; }");
        }
        
        ///  <summary>
        ///  Sets the display height of the frame.
        ///  </summary>
        public virtual Task SetHeightAsync(Int32 height)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.height = val; }", height);
        }
        
        ///  <summary>
        ///  Gets the document this frame contains, if there is any.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Document?> GetContentDocumentAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<Document?>("(element) => { return element.contentDocument; }");
        }
        
        ///  <summary>
        ///  Gets the frame's parent's window context.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Window?> GetContentWindowAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<Window?>("(element) => { return element.contentWindow; }");
        }
    }
    
    ///  <summary>
    ///  Represents the input HTML element.
    ///  </summary>
    public partial class HtmlInputElement : HtmlElement
    {
        
        ///  <summary>
        ///  Increments the value by (step * n), where n defaults to 1 if not
        ///  specified.
        ///  </summary>
        ///  <param name="n">Optional: The number of steps to take.</param>
        public virtual System.Threading.Tasks.Task StepUpAsync(Int32 n)
        {
            return this.EvaluateFunctionInternalAsync("(element, n) => { return element.stepUp(n); }", n);
        }
        
        ///  <summary>
        ///  Decrements the value by (step * n), where n defaults to 1 if not
        ///  specified.
        ///  </summary>
        ///  <param name="n">Optional: The number of steps to take.</param>
        public virtual System.Threading.Tasks.Task StepDownAsync(Int32 n)
        {
            return this.EvaluateFunctionInternalAsync("(element, n) => { return element.stepDown(n); }", n);
        }
        
        ///  <summary>
        ///  Selects the contents of the textarea.
        ///  </summary>
        public virtual System.Threading.Tasks.Task SelectAsync()
        {
            return this.EvaluateFunctionInternalAsync("(element) => { return element.select(); }");
        }
        
        ///  <summary>
        ///  Selects a range of text, and sets selectionStart and selectionEnd.
        ///  If either argument is greater than the length of the value, it is
        ///  treated as pointing to the end of the value. If end is less than
        ///  start, then both are treated as the value of end.
        ///  </summary>
        ///  <param name="selectionStart">The start of the selection.</param>
        ///  <param name="selectionEnd">The end of the selection.</param>
        ///  <param name="selectionDirection">
        ///  Optional: The direction of the selection.
        ///  </param>
        public virtual System.Threading.Tasks.Task SetSelectionRangeAsync(Int32 selectionStart, Int32 selectionEnd, String selectionDirection)
        {
            return this.EvaluateFunctionInternalAsync("(element, selectionStart, selectionEnd, selectionDirection) => { return element.s" +
                    "etSelectionRange(selectionStart, selectionEnd, selectionDirection); }", selectionStart, selectionEnd, selectionDirection);
        }
        
        ///  <summary>
        ///  Checks the validity of the current element.
        ///  </summary>
        ///  <returns>True if the object is valid, otherwise false.</returns>
        public virtual System.Threading.Tasks.Task<Boolean> CheckValidityAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.checkValidity(); }");
        }
        
        ///  <summary>
        ///  Sets a custom validation error. If this is not the empty string,
        ///  then the element is suffering from a custom validation error.
        ///  </summary>
        ///  <param name="error">The error message to use.</param>
        public virtual System.Threading.Tasks.Task SetCustomValidityAsync(String error)
        {
            return this.EvaluateFunctionInternalAsync("(element, error) => { return element.setCustomValidity(error); }", error);
        }
        
        ///  <summary>
        ///  Gets the autofocus HTML attribute, which indicates whether
        ///  the control should have input focus when the page loads.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetAutofocusAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.autofocus; }");
        }
        
        ///  <summary>
        ///  Sets the autofocus HTML attribute, which indicates whether
        ///  the control should have input focus when the page loads.
        ///  </summary>
        public virtual Task SetAutofocusAsync(Boolean autofocus)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.autofocus = val; }", autofocus);
        }
        
        ///  <summary>
        ///  Gets the accept HTML attribute, containing comma-separated
        ///  list of file types accepted by the server when type is file.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetAcceptAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.accept; }");
        }
        
        ///  <summary>
        ///  Sets the accept HTML attribute, containing comma-separated
        ///  list of file types accepted by the server when type is file.
        ///  </summary>
        public virtual Task SetAcceptAsync(String? accept)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.accept = val; }", accept);
        }
        
        ///  <summary>
        ///  Gets the autocomplete HTML attribute, indicating whether
        ///  the value of the control can be automatically completed by the
        ///  browser. Ignored if the value of the type attribute is hidden,
        ///  checkbox, radio, file, or a button type (button, submit, reset,
        ///  image).
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetAutocompleteAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.autocomplete; }");
        }
        
        ///  <summary>
        ///  Sets the autocomplete HTML attribute, indicating whether
        ///  the value of the control can be automatically completed by the
        ///  browser. Ignored if the value of the type attribute is hidden,
        ///  checkbox, radio, file, or a button type (button, submit, reset,
        ///  image).
        ///  </summary>
        public virtual Task SetAutocompleteAsync(String? autocomplete)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.autocomplete = val; }", autocomplete);
        }
        
        ///  <summary>
        ///  Gets if the textarea is enabled or disabled.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetDisabledAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.disabled; }");
        }
        
        ///  <summary>
        ///  Sets if the textarea is enabled or disabled.
        ///  </summary>
        public virtual Task SetDisabledAsync(Boolean disabled)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.disabled = val; }", disabled);
        }
        
        ///  <summary>
        ///  Gets the associated HTML form element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<HtmlFormElement?> GetFormAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlFormElement?>("(element) => { return element.form; }");
        }
        
        ///  <summary>
        ///  Gets the list of assigned labels.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<NodeList> GetLabelsAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<NodeList>("(element) => { return element.labels; }");
        }
        
        ///  <summary>
        ///  Gets a list of selected files.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<FileList?> GetFilesAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<FileList?>("(element) => { return element.files; }");
        }
        
        ///  <summary>
        ///  Gets the name of the element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetNameAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.name; }");
        }
        
        ///  <summary>
        ///  Sets the name of the element.
        ///  </summary>
        public virtual Task SetNameAsync(String? name)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.name = val; }", name);
        }
        
        ///  <summary>
        ///  Gets the type of input control.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetTypeAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.type; }");
        }
        
        ///  <summary>
        ///  Sets the type of input control.
        ///  </summary>
        public virtual Task SetTypeAsync(String type)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.type = val; }", type);
        }
        
        ///  <summary>
        ///  Gets if the field is required.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetRequiredAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.required; }");
        }
        
        ///  <summary>
        ///  Sets if the field is required.
        ///  </summary>
        public virtual Task SetRequiredAsync(Boolean required)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.required = val; }", required);
        }
        
        ///  <summary>
        ///  Gets if the field is read-only.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetReadOnlyAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.readOnly; }");
        }
        
        ///  <summary>
        ///  Sets if the field is read-only.
        ///  </summary>
        public virtual Task SetReadOnlyAsync(Boolean readOnly)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.readOnly = val; }", readOnly);
        }
        
        ///  <summary>
        ///  Gets the alternative text.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetAltAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.alt; }");
        }
        
        ///  <summary>
        ///  Sets the alternative text.
        ///  </summary>
        public virtual Task SetAltAsync(String? alt)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.alt = val; }", alt);
        }
        
        ///  <summary>
        ///  Gets the image source.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetSrcAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.src; }");
        }
        
        ///  <summary>
        ///  Sets the image source.
        ///  </summary>
        public virtual Task SetSrcAsync(String? src)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.src = val; }", src);
        }
        
        ///  <summary>
        ///  Gets max HTML attribute, containing the maximum (numeric
        ///  or date-time) value for this item, which must not be less than its
        ///  minimum (min attribute) value.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetMaximumAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.max; }");
        }
        
        ///  <summary>
        ///  Sets max HTML attribute, containing the maximum (numeric
        ///  or date-time) value for this item, which must not be less than its
        ///  minimum (min attribute) value.
        ///  </summary>
        public virtual Task SetMaxAsync(String? max)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.max = val; }", max);
        }
        
        ///  <summary>
        ///  Gets the min HTML attribute, containing the minimum (numeric
        ///  or date-time) value for this item, which must not be greater than
        ///  its maximum (max attribute) value.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetMinimumAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.min; }");
        }
        
        ///  <summary>
        ///  Sets the min HTML attribute, containing the minimum (numeric
        ///  or date-time) value for this item, which must not be greater than
        ///  its maximum (max attribute) value.
        ///  </summary>
        public virtual Task SetMinAsync(String? min)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.min = val; }", min);
        }
        
        ///  <summary>
        ///  Gets the pattern HTML attribute, containing a regular
        ///  expression that the control's value is checked against. The pattern
        ///  must match the entire value, not just some subset. This attribute
        ///  applies when the value of the type attribute is text, search, tel,
        ///  url or email; otherwise it is ignored.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetPatternAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.pattern; }");
        }
        
        ///  <summary>
        ///  Sets the pattern HTML attribute, containing a regular
        ///  expression that the control's value is checked against. The pattern
        ///  must match the entire value, not just some subset. This attribute
        ///  applies when the value of the type attribute is text, search, tel,
        ///  url or email; otherwise it is ignored.
        ///  </summary>
        public virtual Task SetPatternAsync(String? pattern)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.pattern = val; }", pattern);
        }
        
        ///  <summary>
        ///  Gets the step HTML attribute, which works with min and max
        ///  to limit the increments at which a numeric or date-time value can be
        ///  set. It can be the string any or a positive floating point number.
        ///  If this is not set to any, the control accepts only values at
        ///  multiples of the step value greater than the minimum.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetStepAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.step; }");
        }
        
        ///  <summary>
        ///  Sets the step HTML attribute, which works with min and max
        ///  to limit the increments at which a numeric or date-time value can be
        ///  set. It can be the string any or a positive floating point number.
        ///  If this is not set to any, the control accepts only values at
        ///  multiples of the step value greater than the minimum.
        ///  </summary>
        public virtual Task SetStepAsync(String? step)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.step = val; }", step);
        }
        
        ///  <summary>
        ///  Gets the datalist element in the same document. Only options that
        ///  are valid values for this input element will be displayed. This
        ///  attribute is ignored when the type attribute's value is hidden,
        ///  checkbox, radio, file, or a button type.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<HtmlDataListElement?> GetListAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlDataListElement?>("(element) => { return element.list; }");
        }
        
        ///  <summary>
        ///  Gets the URI of a resource that processes information
        ///  submitted by the button. If specified, this attribute overrides the
        ///  action attribute of the form element that owns this element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetFormActionAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.formAction; }");
        }
        
        ///  <summary>
        ///  Sets the URI of a resource that processes information
        ///  submitted by the button. If specified, this attribute overrides the
        ///  action attribute of the form element that owns this element.
        ///  </summary>
        public virtual Task SetFormActionAsync(String? formAction)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.formAction = val; }", formAction);
        }
        
        ///  <summary>
        ///  Gets the type of content that is used to submit the form to
        ///  the server. If specified, this attribute overrides the enctype
        ///  attribute of the form element that owns this element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetFormEncTypeAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.formEncType; }");
        }
        
        ///  <summary>
        ///  Sets the type of content that is used to submit the form to
        ///  the server. If specified, this attribute overrides the enctype
        ///  attribute of the form element that owns this element.
        ///  </summary>
        public virtual Task SetFormEncTypeAsync(String formEncType)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.formEncType = val; }", formEncType);
        }
        
        ///  <summary>
        ///  Gets the HTTP method that the browser uses to submit the
        ///  form. If specified, this attribute overrides the method attribute
        ///  of the form element that owns this element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetFormMethodAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.formMethod; }");
        }
        
        ///  <summary>
        ///  Sets the HTTP method that the browser uses to submit the
        ///  form. If specified, this attribute overrides the method attribute
        ///  of the form element that owns this element.
        ///  </summary>
        public virtual Task SetFormMethodAsync(String formMethod)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.formMethod = val; }", formMethod);
        }
        
        ///  <summary>
        ///  Gets that the form is not to be validated when it is
        ///  submitted. If specified, this attribute overrides the enctype
        ///  attribute of the form element that owns this element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetFormNoValidateAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.formNoValidate; }");
        }
        
        ///  <summary>
        ///  Sets that the form is not to be validated when it is
        ///  submitted. If specified, this attribute overrides the enctype
        ///  attribute of the form element that owns this element.
        ///  </summary>
        public virtual Task SetFormNoValidateAsync(Boolean formNoValidate)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.formNoValidate = val; }", formNoValidate);
        }
        
        ///  <summary>
        ///  Gets A name or keyword indicating where to display the
        ///  response that is received after submitting the form. If specified,
        ///  this attribute overrides the target attribute of the form element
        ///  that owns this element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetFormTargetAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.formTarget; }");
        }
        
        ///  <summary>
        ///  Sets A name or keyword indicating where to display the
        ///  response that is received after submitting the form. If specified,
        ///  this attribute overrides the target attribute of the form element
        ///  that owns this element.
        ///  </summary>
        public virtual Task SetFormTargetAsync(String? formTarget)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.formTarget = val; }", formTarget);
        }
        
        ///  <summary>
        ///  Gets the default value.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetDefaultValueAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.defaultValue; }");
        }
        
        ///  <summary>
        ///  Sets the default value.
        ///  </summary>
        public virtual Task SetDefaultValueAsync(String defaultValue)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.defaultValue = val; }", defaultValue);
        }
        
        ///  <summary>
        ///  Gets the value.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetValueAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.value; }");
        }
        
        ///  <summary>
        ///  Sets the value.
        ///  </summary>
        public virtual Task SetValueAsync(String value)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.value = val; }", value);
        }
        
        ///  <summary>
        ///  Gets the value of the element, interpreted as one of the
        ///  following in order:
        ///  1.) Time value
        ///  2.) Number
        ///  3.) otherwise NaN.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Double> GetValueAsNumberAsync()
        {
            return this.EvaluateFunctionInternalAsync<Double>("(element) => { return element.valueAsNumber; }");
        }
        
        ///  <summary>
        ///  Sets the value of the element, interpreted as one of the
        ///  following in order:
        ///  1.) Time value
        ///  2.) Number
        ///  3.) otherwise NaN.
        ///  </summary>
        public virtual Task SetValueAsNumberAsync(Double valueAsNumber)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.valueAsNumber = val; }", valueAsNumber);
        }
        
        ///  <summary>
        ///  Gets the value of the element, interpreted as a date, or
        ///  null if conversion is not possible.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<DateTime?> GetValueAsDateAsync()
        {
            return this.EvaluateFunctionInternalAsync<DateTime?>("(element) => { return element.valueAsDate; }");
        }
        
        ///  <summary>
        ///  Sets the value of the element, interpreted as a date, or
        ///  null if conversion is not possible.
        ///  </summary>
        public virtual Task SetValueAsDateAsync(DateTime? valueAsDate)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.valueAsDate = val; }", valueAsDate);
        }
        
        ///  <summary>
        ///  Gets if the state if indeterminate.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetIndeterminateAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.indeterminate; }");
        }
        
        ///  <summary>
        ///  Sets if the state if indeterminate.
        ///  </summary>
        public virtual Task SetIndeterminateAsync(Boolean indeterminate)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.indeterminate = val; }", indeterminate);
        }
        
        ///  <summary>
        ///  Gets
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetIsDefaultCheckedAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.defaultChecked; }");
        }
        
        ///  <summary>
        ///  Sets
        ///  </summary>
        public virtual Task SetDefaultCheckedAsync(Boolean defaultChecked)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.defaultChecked = val; }", defaultChecked);
        }
        
        ///  <summary>
        ///  Gets if the input element is checked or not.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetCheckedAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.checked; }");
        }
        
        ///  <summary>
        ///  Sets if the input element is checked or not.
        ///  </summary>
        public virtual Task SetCheckedAsync(Boolean @checked)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.checked = val; }", @checked);
        }
        
        ///  <summary>
        ///  Gets the display size of the element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Int32> GetSizeAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32>("(element) => { return element.size; }");
        }
        
        ///  <summary>
        ///  Sets the display size of the element.
        ///  </summary>
        public virtual Task SetSizeAsync(Int32 size)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.size = val; }", size);
        }
        
        ///  <summary>
        ///  Gets the multiple HTML attribute, whichindicates whether
        ///  multiple items can be selected.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetMultipleAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.multiple; }");
        }
        
        ///  <summary>
        ///  Sets the multiple HTML attribute, whichindicates whether
        ///  multiple items can be selected.
        ///  </summary>
        public virtual Task SetMultipleAsync(Boolean multiple)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.multiple = val; }", multiple);
        }
        
        ///  <summary>
        ///  Gets the maxlength HTML attribute, indicating the maximum
        ///  number of characters the user can enter. This constraint is
        ///  evaluated only when the value changes.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Int32> GetMaxLengthAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32>("(element) => { return element.maxLength; }");
        }
        
        ///  <summary>
        ///  Sets the maxlength HTML attribute, indicating the maximum
        ///  number of characters the user can enter. This constraint is
        ///  evaluated only when the value changes.
        ///  </summary>
        public virtual Task SetMaxLengthAsync(Int32 maxLength)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.maxLength = val; }", maxLength);
        }
        
        ///  <summary>
        ///  Gets the minlength HTML attribute, indicating the minimum
        ///  number of characters the user can enter. This constraint is
        ///  evaluated only when the value changes.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Int32> GetMinLengthAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32>("(element) => { return element.minLength; }");
        }
        
        ///  <summary>
        ///  Sets the minlength HTML attribute, indicating the minimum
        ///  number of characters the user can enter. This constraint is
        ///  evaluated only when the value changes.
        ///  </summary>
        public virtual Task SetMinLengthAsync(Int32 minLength)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.minLength = val; }", minLength);
        }
        
        ///  <summary>
        ///  Gets the placeholder HTML attribute, containing a hint to
        ///  the user about what to enter in the control.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetPlaceholderAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.placeholder; }");
        }
        
        ///  <summary>
        ///  Sets the placeholder HTML attribute, containing a hint to
        ///  the user about what to enter in the control.
        ///  </summary>
        public virtual Task SetPlaceholderAsync(String? placeholder)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.placeholder = val; }", placeholder);
        }
        
        ///  <summary>
        ///  Gets the display width of the input element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Int32> GetWidthAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32>("(element) => { return element.width; }");
        }
        
        ///  <summary>
        ///  Sets the display width of the input element.
        ///  </summary>
        public virtual Task SetWidthAsync(Int32 width)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.width = val; }", width);
        }
        
        ///  <summary>
        ///  Gets the display height of the input element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Int32> GetHeightAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32>("(element) => { return element.height; }");
        }
        
        ///  <summary>
        ///  Sets the display height of the input element.
        ///  </summary>
        public virtual Task SetHeightAsync(Int32 height)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.height = val; }", height);
        }
        
        ///  <summary>
        ///  Gets the direction in which selection occurred. This is "forward" if
        ///  selection was performed in the start-to-end direction of the current
        ///  locale, or "backward" for the opposite direction.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetSelectionDirectionAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.selectionDirection; }");
        }
        
        ///  <summary>
        ///  Gets the directionality of the form element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetDirectionNameAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.dirName; }");
        }
        
        ///  <summary>
        ///  Sets the directionality of the form element.
        ///  </summary>
        public virtual Task SetDirNameAsync(String? dirName)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.dirName = val; }", dirName);
        }
        
        ///  <summary>
        ///  Gets the index of the beginning of selected text. If no
        ///  text is selected, contains the index of the character that
        ///  follows the input cursor. On being set, the control behaves as if
        ///  setSelectionRange() had been called with this as the first argument,
        ///  and selectionEnd as the second argument.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Int32> GetSelectionStartAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32>("(element) => { return element.selectionStart; }");
        }
        
        ///  <summary>
        ///  Sets the index of the beginning of selected text. If no
        ///  text is selected, contains the index of the character that
        ///  follows the input cursor. On being set, the control behaves as if
        ///  setSelectionRange() had been called with this as the first argument,
        ///  and selectionEnd as the second argument.
        ///  </summary>
        public virtual Task SetSelectionStartAsync(Int32 selectionStart)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.selectionStart = val; }", selectionStart);
        }
        
        ///  <summary>
        ///  Gets the index of the end of selected text. If no text
        ///  is selected, contains the index of the character that follows the
        ///  input cursor. On being set, the control behaves as if
        ///  setSelectionRange() had been called with this as the second
        ///  argument, and selectionStart as the first argument.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Int32> GetSelectionEndAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32>("(element) => { return element.selectionEnd; }");
        }
        
        ///  <summary>
        ///  Sets the index of the end of selected text. If no text
        ///  is selected, contains the index of the character that follows the
        ///  input cursor. On being set, the control behaves as if
        ///  setSelectionRange() had been called with this as the second
        ///  argument, and selectionStart as the first argument.
        ///  </summary>
        public virtual Task SetSelectionEndAsync(Int32 selectionEnd)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.selectionEnd = val; }", selectionEnd);
        }
        
        ///  <summary>
        ///  Gets a value if the current element validates.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetWillValidateAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.willValidate; }");
        }
        
        ///  <summary>
        ///  Gets the current validation state of the current element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<ValidityState> GetValidityAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<ValidityState>("(element) => { return element.validity; }");
        }
        
        ///  <summary>
        ///  Gets the current validation message.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetValidationMessageAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.validationMessage; }");
        }
    }
    
    ///  <summary>
    ///  Represents the keygen HTML element.
    ///  </summary>
    public partial class HtmlKeygenElement : HtmlElement
    {
        
        ///  <summary>
        ///  Checks the validity of the current element.
        ///  </summary>
        ///  <returns>True if the object is valid, otherwise false.</returns>
        public virtual System.Threading.Tasks.Task<Boolean> CheckValidityAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.checkValidity(); }");
        }
        
        ///  <summary>
        ///  Sets a custom validation error. If this is not the empty string,
        ///  then the element is suffering from a custom validation error.
        ///  </summary>
        ///  <param name="error">The error message to use.</param>
        public virtual System.Threading.Tasks.Task SetCustomValidityAsync(String error)
        {
            return this.EvaluateFunctionInternalAsync("(element, error) => { return element.setCustomValidity(error); }", error);
        }
        
        ///  <summary>
        ///  Gets the autofocus HTML attribute, which indicates whether the
        ///  control should have input focus when the page loads.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetAutofocusAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.autofocus; }");
        }
        
        ///  <summary>
        ///  Sets the autofocus HTML attribute, which indicates whether the
        ///  control should have input focus when the page loads.
        ///  </summary>
        public virtual Task SetAutofocusAsync(Boolean autofocus)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.autofocus = val; }", autofocus);
        }
        
        ///  <summary>
        ///  Gets the list of assigned labels.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<NodeList> GetLabelsAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<NodeList>("(element) => { return element.labels; }");
        }
        
        ///  <summary>
        ///  Gets if the keygen is enabled or disabled.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetDisabledAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.disabled; }");
        }
        
        ///  <summary>
        ///  Sets if the keygen is enabled or disabled.
        ///  </summary>
        public virtual Task SetDisabledAsync(Boolean disabled)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.disabled = val; }", disabled);
        }
        
        ///  <summary>
        ///  Gets the associated HTML form element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<HtmlFormElement?> GetFormAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlFormElement?>("(element) => { return element.form; }");
        }
        
        ///  <summary>
        ///  Gets the name of the element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetNameAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.name; }");
        }
        
        ///  <summary>
        ///  Sets the name of the element.
        ///  </summary>
        public virtual Task SetNameAsync(String? name)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.name = val; }", name);
        }
        
        ///  <summary>
        ///  Gets the type of input control (keygen).
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetTypeAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.type; }");
        }
        
        ///  <summary>
        ///  Gets the type of encryption used.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetKeyEncryptionAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.keytype; }");
        }
        
        ///  <summary>
        ///  Sets the type of encryption used.
        ///  </summary>
        public virtual Task SetKeytypeAsync(String? keytype)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.keytype = val; }", keytype);
        }
        
        ///  <summary>
        ///  Gets the challenge attribute.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetChallengeAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.challenge; }");
        }
        
        ///  <summary>
        ///  Sets the challenge attribute.
        ///  </summary>
        public virtual Task SetChallengeAsync(String? challenge)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.challenge = val; }", challenge);
        }
        
        ///  <summary>
        ///  Gets a value if the current element validates.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetWillValidateAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.willValidate; }");
        }
        
        ///  <summary>
        ///  Gets the current validation state of the current element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<ValidityState> GetValidityAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<ValidityState>("(element) => { return element.validity; }");
        }
        
        ///  <summary>
        ///  Gets the current validation message.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetValidationMessageAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.validationMessage; }");
        }
    }
    
    ///  <summary>
    ///  Represents the label HTML element.
    ///  </summary>
    public partial class HtmlLabelElement : HtmlElement
    {
        
        ///  <summary>
        ///  Gets the form element that the label is assigned for, if any.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<HtmlFormElement?> GetFormAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlFormElement?>("(element) => { return element.form; }");
        }
        
        ///  <summary>
        ///  Gets the ID of the labeled control. Reflects the for attribute.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetHtmlForAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.htmlFor; }");
        }
        
        ///  <summary>
        ///  Sets the ID of the labeled control. Reflects the for attribute.
        ///  </summary>
        public virtual Task SetHtmlForAsync(String? htmlFor)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.htmlFor = val; }", htmlFor);
        }
        
        ///  <summary>
        ///  Gets the control that the label is assigned for, if any.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<HtmlElement?> GetControlAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlElement?>("(element) => { return element.control; }");
        }
    }
    
    ///  <summary>
    ///  Represents the legend HTML element.
    ///  </summary>
    public partial class HtmlLegendElement : HtmlElement
    {
        
        ///  <summary>
        ///  Gets the associated form element, if any.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<HtmlFormElement?> GetFormAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlFormElement?>("(element) => { return element.form; }");
        }
    }
    
    ///  <summary>
    ///  Represents a link HTML element.
    ///  </summary>
    public partial class HtmlLinkElement : HtmlElement
    {
        
        ///  <summary>
        ///  Gets if the stylesheet is enabled or disabled.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetDisabledAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.disabled; }");
        }
        
        ///  <summary>
        ///  Sets if the stylesheet is enabled or disabled.
        ///  </summary>
        public virtual Task SetDisabledAsync(Boolean disabled)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.disabled = val; }", disabled);
        }
        
        ///  <summary>
        ///  Gets the URI for the target resource.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetHrefAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.href; }");
        }
        
        ///  <summary>
        ///  Sets the URI for the target resource.
        ///  </summary>
        public virtual Task SetHrefAsync(String? href)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.href = val; }", href);
        }
        
        ///  <summary>
        ///  Gets the forward relationship of the linked resource from the document to the resource.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetRelationAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.rel; }");
        }
        
        ///  <summary>
        ///  Sets the forward relationship of the linked resource from the document to the resource.
        ///  </summary>
        public virtual Task SetRelAsync(String? rel)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.rel = val; }", rel);
        }
        
        ///  <summary>
        ///  Gets the reverse relationship of the linked resource from the resource to the document.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetReverseRelationAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.rev; }");
        }
        
        ///  <summary>
        ///  Sets the reverse relationship of the linked resource from the resource to the document.
        ///  </summary>
        public virtual Task SetRevAsync(String? rev)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.rev = val; }", rev);
        }
        
        ///  <summary>
        ///  Gets the list of relations contained in the rel attribute.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<TokenList> GetRelationListAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<TokenList>("(element) => { return element.relList; }");
        }
        
        ///  <summary>
        ///  Gets the use with one or more target media.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetMediaAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.media; }");
        }
        
        ///  <summary>
        ///  Sets the use with one or more target media.
        ///  </summary>
        public virtual Task SetMediaAsync(String? media)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.media = val; }", media);
        }
        
        ///  <summary>
        ///  Gets the language code for the linked resource.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetTargetLanguageAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.hreflang; }");
        }
        
        ///  <summary>
        ///  Sets the language code for the linked resource.
        ///  </summary>
        public virtual Task SetHreflangAsync(String? hreflang)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.hreflang = val; }", hreflang);
        }
        
        ///  <summary>
        ///  Gets the content type of the style sheet language.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetTypeAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.type; }");
        }
        
        ///  <summary>
        ///  Sets the content type of the style sheet language.
        ///  </summary>
        public virtual Task SetTypeAsync(String? type)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.type = val; }", type);
        }
        
        ///  <summary>
        ///  Gets the list of sizes defined in the sizes attribute.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<SettableTokenList> GetSizesAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<SettableTokenList>("(element) => { return element.sizes; }");
        }
        
        ///  <summary>
        ///  Gets the linked source's integrity, if any.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetIntegrityAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.integrity; }");
        }
        
        ///  <summary>
        ///  Sets the linked source's integrity, if any.
        ///  </summary>
        public virtual Task SetIntegrityAsync(String? integrity)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.integrity = val; }", integrity);
        }
        
        ///  <summary>
        ///  Gets the cross-origin attribute.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetCrossOriginAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.crossOrigin; }");
        }
        
        ///  <summary>
        ///  Sets the cross-origin attribute.
        ///  </summary>
        public virtual Task SetCrossOriginAsync(String? crossOrigin)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.crossOrigin = val; }", crossOrigin);
        }
        
        ///  <summary>
        ///  Gets the nonce attribute.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetNumberUsedOnceAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.nonce; }");
        }
        
        ///  <summary>
        ///  Sets the nonce attribute.
        ///  </summary>
        public virtual Task SetNonceAsync(String? nonce)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.nonce = val; }", nonce);
        }
        
        ///  <summary>
        ///  Gets the StyleSheet object associated with the given element, or
        ///  null if there is none.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<StyleSheet?> GetSheetAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<StyleSheet?>("(element) => { return element.sheet; }");
        }
        
        ///  <summary>
        ///  Gets the Document object associated with the given element, or null
        ///  if there is none.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Document?> GetImportAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<Document?>("(element) => { return element.import; }");
        }
    }
    
    ///  <summary>
    ///  Represents the li HTML element.
    ///  </summary>
    public partial class HtmlListItemElement : HtmlElement
    {
        
        ///  <summary>
        ///  Gets the value in an ordered list.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Int32?> GetValueAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32?>("(element) => { return element.value; }");
        }
        
        ///  <summary>
        ///  Sets the value in an ordered list.
        ///  </summary>
        public virtual Task SetValueAsync(Int32? value)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.value = val; }", value);
        }
    }
    
    ///  <summary>
    ///  Represents the map HTML element.
    ///  </summary>
    public partial class HtmlMapElement : HtmlElement
    {
        
        ///  <summary>
        ///  Gets the name.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetNameAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.name; }");
        }
        
        ///  <summary>
        ///  Sets the name.
        ///  </summary>
        public virtual Task SetNameAsync(String? name)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.name = val; }", name);
        }
        
        ///  <summary>
        ///  Gets a collection representing the area elements
        ///  associated to this map.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<HtmlCollection<HtmlAreaElement>> GetAreasAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlCollection<HtmlAreaElement>>("(element) => { return element.areas; }");
        }
        
        ///  <summary>
        ///  Gets a collection representing the img and object
        ///  elements associated to this element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<HtmlCollection<HtmlImageElement>> GetImagesAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlCollection<HtmlImageElement>>("(element) => { return element.images; }");
        }
    }
    
    ///  <summary>
    ///  Used to declare properties for the marquee element.
    ///  </summary>
    public partial class HtmlMarqueeElement : HtmlElement
    {
        
        ///  <summary>
        ///  Gets the amount of scrolling in pixels.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Int32> GetScrollAmountAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32>("(element) => { return element.scrollamount; }");
        }
        
        ///  <summary>
        ///  Sets the amount of scrolling in pixels.
        ///  </summary>
        public virtual Task SetScrollamountAsync(Int32 scrollamount)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.scrollamount = val; }", scrollamount);
        }
        
        ///  <summary>
        ///  Gets the delay of scrolling in ms.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Int32> GetScrollDelayAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32>("(element) => { return element.scrolldelay; }");
        }
        
        ///  <summary>
        ///  Sets the delay of scrolling in ms.
        ///  </summary>
        public virtual Task SetScrolldelayAsync(Int32 scrolldelay)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.scrolldelay = val; }", scrolldelay);
        }
        
        ///  <summary>
        ///  Gets the loop number.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Int32> GetLoopAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32>("(element) => { return element.loop; }");
        }
        
        ///  <summary>
        ///  Sets the loop number.
        ///  </summary>
        public virtual Task SetLoopAsync(Int32 loop)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.loop = val; }", loop);
        }
    }
    
    ///  <summary>
    ///  Represents the menu HTML element.
    ///  </summary>
    public partial class HtmlMenuElement : HtmlElement
    {
        
        ///  <summary>
        ///  Gets the text label of the menu element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetLabelAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.label; }");
        }
        
        ///  <summary>
        ///  Sets the text label of the menu element.
        ///  </summary>
        public virtual Task SetLabelAsync(String? label)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.label = val; }", label);
        }
        
        ///  <summary>
        ///  Gets the type of the menu element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetTypeAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.type; }");
        }
        
        ///  <summary>
        ///  Sets the type of the menu element.
        ///  </summary>
        public virtual Task SetTypeAsync(String? type)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.type = val; }", type);
        }
    }
    
    ///  <summary>
    ///  Represents the menuitem HTML element.
    ///  </summary>
    public partial class HtmlMenuItemElement : HtmlElement
    {
        
        ///  <summary>
        ///  Gets the assigned master command, if any.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<HtmlElement?> GetCommandAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlElement?>("(element) => { return element.command; }");
        }
        
        ///  <summary>
        ///  Gets the type of command.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetTypeAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.type; }");
        }
        
        ///  <summary>
        ///  Sets the type of command.
        ///  </summary>
        public virtual Task SetTypeAsync(String? type)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.type = val; }", type);
        }
        
        ///  <summary>
        ///  Gets the user-visible label.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetLabelAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.label; }");
        }
        
        ///  <summary>
        ///  Sets the user-visible label.
        ///  </summary>
        public virtual Task SetLabelAsync(String? label)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.label = val; }", label);
        }
        
        ///  <summary>
        ///  Gets the icon for the command.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetIconAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.icon; }");
        }
        
        ///  <summary>
        ///  Sets the icon for the command.
        ///  </summary>
        public virtual Task SetIconAsync(String? icon)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.icon = val; }", icon);
        }
        
        ///  <summary>
        ///  Gets if the menuitem element is enabled or disabled.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetDisabledAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.disabled; }");
        }
        
        ///  <summary>
        ///  Sets if the menuitem element is enabled or disabled.
        ///  </summary>
        public virtual Task SetDisabledAsync(Boolean disabled)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.disabled = val; }", disabled);
        }
        
        ///  <summary>
        ///  Gets if the menuitem element is checked or not.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetCheckedAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.checked; }");
        }
        
        ///  <summary>
        ///  Sets if the menuitem element is checked or not.
        ///  </summary>
        public virtual Task SetCheckedAsync(Boolean @checked)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.checked = val; }", @checked);
        }
        
        ///  <summary>
        ///  Gets if the menuitem element is the default command.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetIsDefaultAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.default; }");
        }
        
        ///  <summary>
        ///  Sets if the menuitem element is the default command.
        ///  </summary>
        public virtual Task SetDefaultAsync(Boolean @default)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.default = val; }", @default);
        }
        
        ///  <summary>
        ///  Gets the name of group of commands to
        ///  treat as a radio button group.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetRadioGroupAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.radiogroup; }");
        }
        
        ///  <summary>
        ///  Sets the name of group of commands to
        ///  treat as a radio button group.
        ///  </summary>
        public virtual Task SetRadiogroupAsync(String? radiogroup)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.radiogroup = val; }", radiogroup);
        }
    }
    
    ///  <summary>
    ///  Represents the meta HTML element.
    ///  </summary>
    public partial class HtmlMetaElement : HtmlElement
    {
        
        ///  <summary>
        ///  Gets the name of the meta element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetNameAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.name; }");
        }
        
        ///  <summary>
        ///  Sets the name of the meta element.
        ///  </summary>
        public virtual Task SetNameAsync(String? name)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.name = val; }", name);
        }
        
        ///  <summary>
        ///  Gets the value of the equivalent in a meta element, which
        ///  is effective if the server doesn't send a corresponding real header.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetHttpEquivalentAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.httpEquiv; }");
        }
        
        ///  <summary>
        ///  Sets the value of the equivalent in a meta element, which
        ///  is effective if the server doesn't send a corresponding real header.
        ///  </summary>
        public virtual Task SetHttpEquivAsync(String? httpEquiv)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.httpEquiv = val; }", httpEquiv);
        }
        
        ///  <summary>
        ///  Gets the value of the content attribute of the meta element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetContentAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.content; }");
        }
        
        ///  <summary>
        ///  Sets the value of the content attribute of the meta element.
        ///  </summary>
        public virtual Task SetContentAsync(String? content)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.content = val; }", content);
        }
    }
    
    ///  <summary>
    ///  Represents the meter HTML element.
    ///  </summary>
    public partial class HtmlMeterElement : HtmlElement
    {
        
        ///  <summary>
        ///  Gets the current value.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Double> GetValueAsync()
        {
            return this.EvaluateFunctionInternalAsync<Double>("(element) => { return element.value; }");
        }
        
        ///  <summary>
        ///  Sets the current value.
        ///  </summary>
        public virtual Task SetValueAsync(Double value)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.value = val; }", value);
        }
        
        ///  <summary>
        ///  Gets the minimum value.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Double> GetMinimumAsync()
        {
            return this.EvaluateFunctionInternalAsync<Double>("(element) => { return element.min; }");
        }
        
        ///  <summary>
        ///  Sets the minimum value.
        ///  </summary>
        public virtual Task SetMinAsync(Double min)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.min = val; }", min);
        }
        
        ///  <summary>
        ///  Gets the maximum value.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Double> GetMaximumAsync()
        {
            return this.EvaluateFunctionInternalAsync<Double>("(element) => { return element.max; }");
        }
        
        ///  <summary>
        ///  Sets the maximum value.
        ///  </summary>
        public virtual Task SetMaxAsync(Double max)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.max = val; }", max);
        }
        
        ///  <summary>
        ///  Gets the low value.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Double> GetLowAsync()
        {
            return this.EvaluateFunctionInternalAsync<Double>("(element) => { return element.low; }");
        }
        
        ///  <summary>
        ///  Sets the low value.
        ///  </summary>
        public virtual Task SetLowAsync(Double low)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.low = val; }", low);
        }
        
        ///  <summary>
        ///  Gets the high value.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Double> GetHighAsync()
        {
            return this.EvaluateFunctionInternalAsync<Double>("(element) => { return element.high; }");
        }
        
        ///  <summary>
        ///  Sets the high value.
        ///  </summary>
        public virtual Task SetHighAsync(Double high)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.high = val; }", high);
        }
        
        ///  <summary>
        ///  Gets the optimum value.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Double> GetOptimumAsync()
        {
            return this.EvaluateFunctionInternalAsync<Double>("(element) => { return element.optimum; }");
        }
        
        ///  <summary>
        ///  Sets the optimum value.
        ///  </summary>
        public virtual Task SetOptimumAsync(Double optimum)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.optimum = val; }", optimum);
        }
        
        ///  <summary>
        ///  Gets the list of assigned labels.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<NodeList> GetLabelsAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<NodeList>("(element) => { return element.labels; }");
        }
    }
    
    ///  <summary>
    ///  Represents the mod HTML element.
    ///  </summary>
    public partial class HtmlModElement : HtmlElement
    {
        
        ///  <summary>
        ///  Gets the cite HTML attribute, containing a URI of a
        ///  resource explaining the change.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetCitationAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.cite; }");
        }
        
        ///  <summary>
        ///  Gets the cite HTML attribute, containing a URI of a
        ///  resource explaining the change.
        ///  </summary>
        public virtual Task SetCiteAsync(String? cite)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.cite = val; }", cite);
        }
        
        ///  <summary>
        ///  Gets the datetime HTML attribute, containing a date-and-time
        ///  string representing a timestamp for the change.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetDateTimeAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.datetime; }");
        }
        
        ///  <summary>
        ///  Gets the datetime HTML attribute, containing a date-and-time
        ///  string representing a timestamp for the change.
        ///  </summary>
        public virtual Task SetDatetimeAsync(String? datetime)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.datetime = val; }", datetime);
        }
    }
    
    ///  <summary>
    ///  Represents the object HTML element.
    ///  </summary>
    public partial class HtmlObjectElement : HtmlElement
    {
        
        ///  <summary>
        ///  Checks the validity of the current element.
        ///  </summary>
        ///  <returns>True if the object is valid, otherwise false.</returns>
        public virtual System.Threading.Tasks.Task<Boolean> CheckValidityAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.checkValidity(); }");
        }
        
        ///  <summary>
        ///  Sets a custom validation error. If this is not the empty string,
        ///  then the element is suffering from a custom validation error.
        ///  </summary>
        ///  <param name="error">The error message to use.</param>
        public virtual System.Threading.Tasks.Task SetCustomValidityAsync(String error)
        {
            return this.EvaluateFunctionInternalAsync("(element, error) => { return element.setCustomValidity(error); }", error);
        }
        
        ///  <summary>
        ///  Gets the address of the resource.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetSrcAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.data; }");
        }
        
        ///  <summary>
        ///  Sets the address of the resource.
        ///  </summary>
        public virtual Task SetDataAsync(String? data)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.data = val; }", data);
        }
        
        ///  <summary>
        ///  Gets the type of the resource. If present,
        ///  the attribute must be a valid MIME type.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetTypeAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.type; }");
        }
        
        ///  <summary>
        ///  Sets the type of the resource. If present,
        ///  the attribute must be a valid MIME type.
        ///  </summary>
        public virtual Task SetTypeAsync(String? type)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.type = val; }", type);
        }
        
        ///  <summary>
        ///  Gets an attribute whose presence indicates that the resource specified by the data
        ///  attribute is only to be used if the value of the type attribute and the Content-Type of the
        ///  aforementioned resource match.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetTypeMustMatchAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.typeMustMatch; }");
        }
        
        ///  <summary>
        ///  Sets an attribute whose presence indicates that the resource specified by the data
        ///  attribute is only to be used if the value of the type attribute and the Content-Type of the
        ///  aforementioned resource match.
        ///  </summary>
        public virtual Task SetTypeMustMatchAsync(Boolean typeMustMatch)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.typeMustMatch = val; }", typeMustMatch);
        }
        
        ///  <summary>
        ///  Gets the name of the object.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetNameAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.name; }");
        }
        
        ///  <summary>
        ///  Sets the name of the object.
        ///  </summary>
        public virtual Task SetNameAsync(String? name)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.name = val; }", name);
        }
        
        ///  <summary>
        ///  Gets the associated image map of the object if the object element represents an image.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetUseMapAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.useMap; }");
        }
        
        ///  <summary>
        ///  Sets the associated image map of the object if the object element represents an image.
        ///  </summary>
        public virtual Task SetUseMapAsync(String? useMap)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.useMap = val; }", useMap);
        }
        
        ///  <summary>
        ///  Gets the associated HTML form element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<HtmlFormElement?> GetFormAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlFormElement?>("(element) => { return element.form; }");
        }
        
        ///  <summary>
        ///  Gets the display width of the object element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Int32> GetWidthAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32>("(element) => { return element.width; }");
        }
        
        ///  <summary>
        ///  Sets the display width of the object element.
        ///  </summary>
        public virtual Task SetWidthAsync(Int32 width)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.width = val; }", width);
        }
        
        ///  <summary>
        ///  Gets the display height of the object element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Int32> GetHeightAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32>("(element) => { return element.height; }");
        }
        
        ///  <summary>
        ///  Sets the display height of the object element.
        ///  </summary>
        public virtual Task SetHeightAsync(Int32 height)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.height = val; }", height);
        }
        
        ///  <summary>
        ///  Gets the active document of the object element's nested browsing context, if it has one;
        ///  otherwise returns null.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Document?> GetContentDocumentAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<Document?>("(element) => { return element.contentDocument; }");
        }
        
        ///  <summary>
        ///  Gets the object element's nested browsing context, if it has one; otherwise returns null.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Window?> GetContentWindowAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<Window?>("(element) => { return element.contentWindow; }");
        }
        
        ///  <summary>
        ///  Gets a value if the current element validates.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetWillValidateAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.willValidate; }");
        }
        
        ///  <summary>
        ///  Gets the current validation state of the current element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<ValidityState> GetValidityAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<ValidityState>("(element) => { return element.validity; }");
        }
        
        ///  <summary>
        ///  Gets the current validation message.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetValidationMessageAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.validationMessage; }");
        }
    }
    
    ///  <summary>
    ///  Represents the option HTML element.
    ///  </summary>
    public partial class HtmlOptionElement : HtmlElement
    {
        
        ///  <summary>
        ///  Gets if the option is enabled or disabled.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetDisabledAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.disabled; }");
        }
        
        ///  <summary>
        ///  Sets if the option is enabled or disabled.
        ///  </summary>
        public virtual Task SetDisabledAsync(Boolean disabled)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.disabled = val; }", disabled);
        }
        
        ///  <summary>
        ///  Gets the associated HTML form element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<HtmlFormElement?> GetFormAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlFormElement?>("(element) => { return element.form; }");
        }
        
        ///  <summary>
        ///  Gets the label.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetLabelAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.label; }");
        }
        
        ///  <summary>
        ///  Sets the label.
        ///  </summary>
        public virtual Task SetLabelAsync(String? label)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.label = val; }", label);
        }
        
        ///  <summary>
        ///  Gets if the option is selected by default.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetDefaultSelectedAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.defaultSelected; }");
        }
        
        ///  <summary>
        ///  Sets if the option is selected by default.
        ///  </summary>
        public virtual Task SetDefaultSelectedAsync(Boolean defaultSelected)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.defaultSelected = val; }", defaultSelected);
        }
        
        ///  <summary>
        ///  Gets if the option is currently selected.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetSelectedAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.selected; }");
        }
        
        ///  <summary>
        ///  Sets if the option is currently selected.
        ///  </summary>
        public virtual Task SetSelectedAsync(Boolean selected)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.selected = val; }", selected);
        }
        
        ///  <summary>
        ///  Gets the value.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetValueAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.value; }");
        }
        
        ///  <summary>
        ///  Sets the value.
        ///  </summary>
        public virtual Task SetValueAsync(String value)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.value = val; }", value);
        }
        
        ///  <summary>
        ///  Gets the text of the option.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetTextAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.text; }");
        }
        
        ///  <summary>
        ///  Sets the text of the option.
        ///  </summary>
        public virtual Task SetTextAsync(String text)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.text = val; }", text);
        }
        
        ///  <summary>
        ///  Gets the index of the option element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Int32> GetIndexAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32>("(element) => { return element.index; }");
        }
    }
    
    ///  <summary>
    ///  Represents a collection of HTML option elements.
    ///  </summary>
    public partial class HtmlOptionsCollection : HtmlCollection<HtmlOptionElement>
    {
        
        ///  <summary>
        ///  Adds an option element to the collection.
        ///  </summary>
        ///  <param name="element">The element to add.</param>
        ///  <param name="before">The optional reference element for inserting.</param>
        public virtual System.Threading.Tasks.Task AddAsync(HtmlOptionElement element, HtmlElement? before)
        {
            return this.EvaluateFunctionInternalAsync("(element, element, before) => { return element.add(element, before); }", element, before);
        }
        
        ///  <summary>
        ///  Adds an options group element to the collection.
        ///  </summary>
        ///  <param name="element">The element to add.</param>
        ///  <param name="before">The optional reference element for inserting.</param>
        public virtual System.Threading.Tasks.Task AddAsync(HtmlOptionsGroupElement element, HtmlElement? before)
        {
            return this.EvaluateFunctionInternalAsync("(element, element, before) => { return element.add(element, before); }", element, before);
        }
        
        ///  <summary>
        ///  Removes an element from the collection.
        ///  </summary>
        ///  <param name="index">The index of the element of remove.</param>
        public virtual System.Threading.Tasks.Task RemoveAsync(Int32 index)
        {
            return this.EvaluateFunctionInternalAsync("(element, index) => { return element.remove(index); }", index);
        }
        
        ///  <summary>
        ///  Gets the selected index.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Int32> GetSelectedIndexAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32>("(element) => { return element.selectedIndex; }");
        }
        
        ///  <summary>
        ///  Sets the selected index.
        ///  </summary>
        public virtual Task SetSelectedIndexAsync(Int32 selectedIndex)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.selectedIndex = val; }", selectedIndex);
        }
    }
    
    ///  <summary>
    ///  Represents the optgroup HTML element.
    ///  </summary>
    public partial class HtmlOptionsGroupElement : HtmlElement
    {
        
        ///  <summary>
        ///  Gets if the optgroup is enabled or disabled.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetDisabledAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.disabled; }");
        }
        
        ///  <summary>
        ///  Sets if the optgroup is enabled or disabled.
        ///  </summary>
        public virtual Task SetDisabledAsync(Boolean disabled)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.disabled = val; }", disabled);
        }
        
        ///  <summary>
        ///  Gets the label.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetLabelAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.label; }");
        }
        
        ///  <summary>
        ///  Sets the label.
        ///  </summary>
        public virtual Task SetLabelAsync(String? label)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.label = val; }", label);
        }
    }
    
    ///  <summary>
    ///  Represents the ol HTML element.
    ///  </summary>
    public partial class HtmlOrderedListElement : HtmlElement
    {
        
        ///  <summary>
        ///  Gets if the order is reversed.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetIsReversedAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.reversed; }");
        }
        
        ///  <summary>
        ///  Sets if the order is reversed.
        ///  </summary>
        public virtual Task SetReversedAsync(Boolean reversed)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.reversed = val; }", reversed);
        }
        
        ///  <summary>
        ///  Gets the lowest number.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Int32> GetStartAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32>("(element) => { return element.start; }");
        }
        
        ///  <summary>
        ///  Sets the lowest number.
        ///  </summary>
        public virtual Task SetStartAsync(Int32 start)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.start = val; }", start);
        }
        
        ///  <summary>
        ///  Gets the type of enumeration.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetTypeAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.type; }");
        }
        
        ///  <summary>
        ///  Sets the type of enumeration.
        ///  </summary>
        public virtual Task SetTypeAsync(String? type)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.type = val; }", type);
        }
    }
    
    ///  <summary>
    ///  Represents the output HTML element.
    ///  </summary>
    public partial class HtmlOutputElement : HtmlElement
    {
        
        ///  <summary>
        ///  Checks the validity of the current element.
        ///  </summary>
        ///  <returns>True if the object is valid, otherwise false.</returns>
        public virtual System.Threading.Tasks.Task<Boolean> CheckValidityAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.checkValidity(); }");
        }
        
        ///  <summary>
        ///  Sets a custom validation error. If this is not the empty string,
        ///  then the element is suffering from a custom validation error.
        ///  </summary>
        ///  <param name="error">The error message to use.</param>
        public virtual System.Threading.Tasks.Task SetCustomValidityAsync(String error)
        {
            return this.EvaluateFunctionInternalAsync("(element, error) => { return element.setCustomValidity(error); }", error);
        }
        
        ///  <summary>
        ///  Gets the IDs of the input elements.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<SettableTokenList> GetHtmlForAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<SettableTokenList>("(element) => { return element.htmlFor; }");
        }
        
        ///  <summary>
        ///  Gets the default value.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetDefaultValueAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.defaultValue; }");
        }
        
        ///  <summary>
        ///  Sets the default value.
        ///  </summary>
        public virtual Task SetDefaultValueAsync(String defaultValue)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.defaultValue = val; }", defaultValue);
        }
        
        ///  <summary>
        ///  Gets the value.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetValueAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.value; }");
        }
        
        ///  <summary>
        ///  Sets the value.
        ///  </summary>
        public virtual Task SetValueAsync(String value)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.value = val; }", value);
        }
        
        ///  <summary>
        ///  Gets the list of assigned labels.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<NodeList> GetLabelsAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<NodeList>("(element) => { return element.labels; }");
        }
        
        ///  <summary>
        ///  Gets the type of input control (output).
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetTypeAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.type; }");
        }
        
        ///  <summary>
        ///  Gets the associated HTML form element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<HtmlFormElement?> GetFormAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlFormElement?>("(element) => { return element.form; }");
        }
        
        ///  <summary>
        ///  Gets the name of the element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetNameAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.name; }");
        }
        
        ///  <summary>
        ///  Sets the name of the element.
        ///  </summary>
        public virtual Task SetNameAsync(String? name)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.name = val; }", name);
        }
        
        ///  <summary>
        ///  Gets a value if the current element validates.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetWillValidateAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.willValidate; }");
        }
        
        ///  <summary>
        ///  Gets the current validation state of the current element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<ValidityState> GetValidityAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<ValidityState>("(element) => { return element.validity; }");
        }
        
        ///  <summary>
        ///  Gets the current validation message.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetValidationMessageAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.validationMessage; }");
        }
    }
    
    ///  <summary>
    ///  Represents the p HTML element.
    ///  </summary>
    public partial class HtmlParagraphElement : HtmlElement
    {
    }
    
    ///  <summary>
    ///  Represents the param HTML element.
    ///  </summary>
    public partial class HtmlParamElement : HtmlElement
    {
        
        ///  <summary>
        ///  Gets the name of the parameter.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetNameAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.name; }");
        }
        
        ///  <summary>
        ///  Sets the name of the parameter.
        ///  </summary>
        public virtual Task SetNameAsync(String? name)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.name = val; }", name);
        }
        
        ///  <summary>
        ///  Gets the value of the parameter.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetValueAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.value; }");
        }
        
        ///  <summary>
        ///  Sets the value of the parameter.
        ///  </summary>
        public virtual Task SetValueAsync(String? value)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.value = val; }", value);
        }
    }
    
    ///  <summary>
    ///  Represents the HTML picture element.
    ///  </summary>
    public partial class HtmlPictureElement : HtmlElement
    {
    }
    
    ///  <summary>
    ///  Represents the pre HTML element.
    ///  </summary>
    public partial class HtmlPreElement : HtmlElement
    {
    }
    
    ///  <summary>
    ///  Represents the progress HTML element.
    ///  </summary>
    public partial class HtmlProgressElement : HtmlElement
    {
        
        ///  <summary>
        ///  Gets the current value.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Double> GetValueAsync()
        {
            return this.EvaluateFunctionInternalAsync<Double>("(element) => { return element.value; }");
        }
        
        ///  <summary>
        ///  Sets the current value.
        ///  </summary>
        public virtual Task SetValueAsync(Double value)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.value = val; }", value);
        }
        
        ///  <summary>
        ///  Gets the maximum value.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Double> GetMaximumAsync()
        {
            return this.EvaluateFunctionInternalAsync<Double>("(element) => { return element.max; }");
        }
        
        ///  <summary>
        ///  Sets the maximum value.
        ///  </summary>
        public virtual Task SetMaxAsync(Double max)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.max = val; }", max);
        }
        
        ///  <summary>
        ///  Gets the position.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Double> GetPositionAsync()
        {
            return this.EvaluateFunctionInternalAsync<Double>("(element) => { return element.position; }");
        }
        
        ///  <summary>
        ///  Gets the list of assigned labels.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<NodeList> GetLabelsAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<NodeList>("(element) => { return element.labels; }");
        }
    }
    
    ///  <summary>
    ///  Represents the q HTML element.
    ///  </summary>
    public partial class HtmlQuoteElement : HtmlElement
    {
        
        ///  <summary>
        ///  Gets the citation of the element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetCitationAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.cite; }");
        }
        
        ///  <summary>
        ///  Sets the citation of the element.
        ///  </summary>
        public virtual Task SetCiteAsync(String? cite)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.cite = val; }", cite);
        }
    }
    
    ///  <summary>
    ///  Represents the script HTML element.
    ///  </summary>
    public partial class HtmlScriptElement : HtmlElement
    {
        
        ///  <summary>
        ///  Gets the source URL of the script.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetSrcAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.src; }");
        }
        
        ///  <summary>
        ///  Sets the source URL of the script.
        ///  </summary>
        public virtual Task SetSrcAsync(String? src)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.src = val; }", src);
        }
        
        ///  <summary>
        ///  Gets if the script should be run asynchronously.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetIsAsyncAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.async; }");
        }
        
        ///  <summary>
        ///  Sets if the script should be run asynchronously.
        ///  </summary>
        public virtual Task SetAsyncAsync(Boolean async)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.async = val; }", async);
        }
        
        ///  <summary>
        ///  Gets if script execution should be deferred.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetIsDeferredAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.defer; }");
        }
        
        ///  <summary>
        ///  Sets if script execution should be deferred.
        ///  </summary>
        public virtual Task SetDeferAsync(Boolean defer)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.defer = val; }", defer);
        }
        
        ///  <summary>
        ///  Gets the type of script.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetTypeAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.type; }");
        }
        
        ///  <summary>
        ///  Sets the type of script.
        ///  </summary>
        public virtual Task SetTypeAsync(String? type)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.type = val; }", type);
        }
        
        ///  <summary>
        ///  Gets the character set of the script.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetCharacterSetAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.charset; }");
        }
        
        ///  <summary>
        ///  Sets the character set of the script.
        ///  </summary>
        public virtual Task SetCharsetAsync(String? charset)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.charset = val; }", charset);
        }
        
        ///  <summary>
        ///  Gets the cross-origin attribute.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetCrossOriginAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.crossOrigin; }");
        }
        
        ///  <summary>
        ///  Sets the cross-origin attribute.
        ///  </summary>
        public virtual Task SetCrossOriginAsync(String? crossOrigin)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.crossOrigin = val; }", crossOrigin);
        }
        
        ///  <summary>
        ///  Gets the script's source code.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetTextAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.text; }");
        }
        
        ///  <summary>
        ///  Sets the script's source code.
        ///  </summary>
        public virtual Task SetTextAsync(String text)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.text = val; }", text);
        }
        
        ///  <summary>
        ///  Gets the linked source's integrity, if any.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetIntegrityAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.integrity; }");
        }
        
        ///  <summary>
        ///  Sets the linked source's integrity, if any.
        ///  </summary>
        public virtual Task SetIntegrityAsync(String? integrity)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.integrity = val; }", integrity);
        }
    }
    
    ///  <summary>
    ///  Represents the select HTML element.
    ///  </summary>
    public partial class HtmlSelectElement : HtmlElement
    {
        
        ///  <summary>
        ///  Adds an option element to the options collection.
        ///  </summary>
        ///  <param name="element">The element to add.</param>
        ///  <param name="before">The optional reference element for inserting.</param>
        public virtual System.Threading.Tasks.Task AddAsync(HtmlOptionElement element, HtmlElement? before)
        {
            return this.EvaluateFunctionInternalAsync("(element, element, before) => { return element.add(element, before); }", element, before);
        }
        
        ///  <summary>
        ///  Adds an options group element to the options collection.
        ///  </summary>
        ///  <param name="element">The element to add.</param>
        ///  <param name="before">The optional reference element for inserting.</param>
        public virtual System.Threading.Tasks.Task AddAsync(HtmlOptionsGroupElement element, HtmlElement? before)
        {
            return this.EvaluateFunctionInternalAsync("(element, element, before) => { return element.add(element, before); }", element, before);
        }
        
        ///  <summary>
        ///  Removes an element from the options collection.
        ///  </summary>
        ///  <param name="index">The index of the element of remove.</param>
        public virtual System.Threading.Tasks.Task RemoveAsync(Int32 index)
        {
            return this.EvaluateFunctionInternalAsync("(element, index) => { return element.remove(index); }", index);
        }
        
        ///  <summary>
        ///  Checks the validity of the current element.
        ///  </summary>
        ///  <returns>True if the object is valid, otherwise false.</returns>
        public virtual System.Threading.Tasks.Task<Boolean> CheckValidityAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.checkValidity(); }");
        }
        
        ///  <summary>
        ///  Sets a custom validation error. If this is not the empty string,
        ///  then the element is suffering from a custom validation error.
        ///  </summary>
        ///  <param name="error">The error message to use.</param>
        public virtual System.Threading.Tasks.Task SetCustomValidityAsync(String error)
        {
            return this.EvaluateFunctionInternalAsync("(element, error) => { return element.setCustomValidity(error); }", error);
        }
        
        ///  <summary>
        ///  Gets the autofocus HTML attribute, which indicates whether the
        ///  control should have input focus when the page loads.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetAutofocusAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.autofocus; }");
        }
        
        ///  <summary>
        ///  Sets the autofocus HTML attribute, which indicates whether the
        ///  control should have input focus when the page loads.
        ///  </summary>
        public virtual Task SetAutofocusAsync(Boolean autofocus)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.autofocus = val; }", autofocus);
        }
        
        ///  <summary>
        ///  Gets if the button is enabled or disabled.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetDisabledAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.disabled; }");
        }
        
        ///  <summary>
        ///  Sets if the button is enabled or disabled.
        ///  </summary>
        public virtual Task SetDisabledAsync(Boolean disabled)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.disabled = val; }", disabled);
        }
        
        ///  <summary>
        ///  Gets the associated HTML form element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<HtmlFormElement?> GetFormAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlFormElement?>("(element) => { return element.form; }");
        }
        
        ///  <summary>
        ///  Gets the list of assigned labels.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<NodeList> GetLabelsAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<NodeList>("(element) => { return element.labels; }");
        }
        
        ///  <summary>
        ///  Gets the name of the element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetNameAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.name; }");
        }
        
        ///  <summary>
        ///  Sets the name of the element.
        ///  </summary>
        public virtual Task SetNameAsync(String? name)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.name = val; }", name);
        }
        
        ///  <summary>
        ///  Gets the value.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetValueAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.value; }");
        }
        
        ///  <summary>
        ///  Sets the value.
        ///  </summary>
        public virtual Task SetValueAsync(String? value)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.value = val; }", value);
        }
        
        ///  <summary>
        ///  Gets the type of input element (select).
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetTypeAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.type; }");
        }
        
        ///  <summary>
        ///  Gets if the field is required.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetRequiredAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.required; }");
        }
        
        ///  <summary>
        ///  Sets if the field is required.
        ///  </summary>
        public virtual Task SetRequiredAsync(Boolean required)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.required = val; }", required);
        }
        
        ///  <summary>
        ///  Gets the set of options that are selected.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<HtmlCollection<HtmlOptionElement>> GetSelectedOptionsAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlCollection<HtmlOptionElement>>("(element) => { return element.selectedOptions; }");
        }
        
        ///  <summary>
        ///  Gets the display size of the element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Int32> GetSizeAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32>("(element) => { return element.size; }");
        }
        
        ///  <summary>
        ///  Sets the display size of the element.
        ///  </summary>
        public virtual Task SetSizeAsync(Int32 size)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.size = val; }", size);
        }
        
        ///  <summary>
        ///  Gets the set of option elements contained by this element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<HtmlOptionsCollection> GetOptionsAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlOptionsCollection>("(element) => { return element.options; }");
        }
        
        ///  <summary>
        ///  Gets the number of option elements in this select element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Int32> GetLengthAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32>("(element) => { return element.length; }");
        }
        
        ///  <summary>
        ///  Gets the multiple HTML attribute, whichindicates whether multiple items can be selected.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetMultipleAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.multiple; }");
        }
        
        ///  <summary>
        ///  Sets the multiple HTML attribute, whichindicates whether multiple items can be selected.
        ///  </summary>
        public virtual Task SetMultipleAsync(Boolean multiple)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.multiple = val; }", multiple);
        }
        
        ///  <summary>
        ///  Gets the index of the first selected option element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Int32> GetSelectedIndexAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32>("(element) => { return element.selectedIndex; }");
        }
        
        ///  <summary>
        ///  Gets a value if the current element validates.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetWillValidateAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.willValidate; }");
        }
        
        ///  <summary>
        ///  Gets the current validation state of the current element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<ValidityState> GetValidityAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<ValidityState>("(element) => { return element.validity; }");
        }
        
        ///  <summary>
        ///  Gets the current validation message.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetValidationMessageAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.validationMessage; }");
        }
    }
    
    ///  <summary>
    ///  Represents the source HTML element.
    ///  </summary>
    public partial class HtmlSourceElement : HtmlElement
    {
        
        ///  <summary>
        ///  Gets the URL for a media resource. Is ignored when used for
        ///  the picture element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetSrcAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.src; }");
        }
        
        ///  <summary>
        ///  Sets the URL for a media resource. Is ignored when used for
        ///  the picture element.
        ///  </summary>
        public virtual Task SetSrcAsync(String? src)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.src = val; }", src);
        }
        
        ///  <summary>
        ///  Gets the URL of a picture element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetSourceSetAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.srcset; }");
        }
        
        ///  <summary>
        ///  Sets the URL of a picture element.
        ///  </summary>
        public virtual Task SetSrcsetAsync(String? srcset)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.srcset = val; }", srcset);
        }
        
        ///  <summary>
        ///  Gets the sizes if used in conjunction with a picture.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetSizesAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.sizes; }");
        }
        
        ///  <summary>
        ///  Sets the sizes if used in conjunction with a picture.
        ///  </summary>
        public virtual Task SetSizesAsync(String? sizes)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.sizes = val; }", sizes);
        }
        
        ///  <summary>
        ///  Gets the type of the media source.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetTypeAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.type; }");
        }
        
        ///  <summary>
        ///  Sets the type of the media source.
        ///  </summary>
        public virtual Task SetTypeAsync(String? type)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.type = val; }", type);
        }
        
        ///  <summary>
        ///  Gets the intended type of the media resource.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetMediaAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.media; }");
        }
        
        ///  <summary>
        ///  Sets the intended type of the media resource.
        ///  </summary>
        public virtual Task SetMediaAsync(String? media)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.media = val; }", media);
        }
    }
    
    ///  <summary>
    ///  Represents the span HTML element.
    ///  </summary>
    public partial class HtmlSpanElement : HtmlElement
    {
    }
    
    ///  <summary>
    ///  Represents a style HTML element.
    ///  </summary>
    public partial class HtmlStyleElement : HtmlElement
    {
        
        ///  <summary>
        ///  Gets if the style is enabled or disabled.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetDisabledAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.disabled; }");
        }
        
        ///  <summary>
        ///  Sets if the style is enabled or disabled.
        ///  </summary>
        public virtual Task SetDisabledAsync(Boolean disabled)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.disabled = val; }", disabled);
        }
        
        ///  <summary>
        ///  Gets the use with one or more target media.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetMediaAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.media; }");
        }
        
        ///  <summary>
        ///  Sets the use with one or more target media.
        ///  </summary>
        public virtual Task SetMediaAsync(String? media)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.media = val; }", media);
        }
        
        ///  <summary>
        ///  Gets the content type of the style sheet language.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetTypeAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.type; }");
        }
        
        ///  <summary>
        ///  Sets the content type of the style sheet language.
        ///  </summary>
        public virtual Task SetTypeAsync(String? type)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.type = val; }", type);
        }
        
        ///  <summary>
        ///  Gets if the style is scoped.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetIsScopedAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.scoped; }");
        }
        
        ///  <summary>
        ///  Sets if the style is scoped.
        ///  </summary>
        public virtual Task SetScopedAsync(Boolean scoped)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.scoped = val; }", scoped);
        }
        
        ///  <summary>
        ///  Gets the StyleSheet object associated with the given element, or
        ///  null if there is none.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<StyleSheet?> GetSheetAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<StyleSheet?>("(element) => { return element.sheet; }");
        }
    }
    
    ///  <summary>
    ///  Represents the caption HTML element.
    ///  </summary>
    public partial class HtmlTableCaptionElement : HtmlElement
    {
    }
    
    ///  <summary>
    ///  Reprsents the base for td / th HTML element.
    ///  </summary>
    public partial class HtmlTableCellElement : HtmlElement
    {
        
        ///  <summary>
        ///  Gets the number of columns spanned by cell.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Int32> GetColSpanAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32>("(element) => { return element.colSpan; }");
        }
        
        ///  <summary>
        ///  Sets the number of columns spanned by cell.
        ///  </summary>
        public virtual Task SetColSpanAsync(Int32 colSpan)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.colSpan = val; }", colSpan);
        }
        
        ///  <summary>
        ///  Gets the number of rows spanned by cell.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Int32> GetRowSpanAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32>("(element) => { return element.rowSpan; }");
        }
        
        ///  <summary>
        ///  Sets the number of rows spanned by cell.
        ///  </summary>
        public virtual Task SetRowSpanAsync(Int32 rowSpan)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.rowSpan = val; }", rowSpan);
        }
        
        ///  <summary>
        ///  Gets the list of id attribute values for header cells.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<SettableTokenList> GetHeadersAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<SettableTokenList>("(element) => { return element.headers; }");
        }
        
        ///  <summary>
        ///  Gets the index of this cell in the row, starting from 0.
        ///  This index is in document tree order and not display order.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Int32> GetIndexAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32>("(element) => { return element.cellIndex; }");
        }
    }
    
    ///  <summary>
    ///  Represents the col HTML element.
    ///  </summary>
    public partial class HtmlTableColumnElement : HtmlElement
    {
        
        ///  <summary>
        ///  Gets the number of columns in a group or affected by a grouping.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Int32> GetSpanAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32>("(element) => { return element.span; }");
        }
        
        ///  <summary>
        ///  Sets the number of columns in a group or affected by a grouping.
        ///  </summary>
        public virtual Task SetSpanAsync(Int32 span)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.span = val; }", span);
        }
    }
    
    ///  <summary>
    ///  Represents the td HTML element.
    ///  </summary>
    public partial class HtmlTableDataCellElement : HtmlTableCellElement
    {
    }
    
    ///  <summary>
    ///  Represents the table HTML element.
    ///  </summary>
    public partial class HtmlTableElement : HtmlElement
    {
        
        ///  <summary>
        ///  Creates a new table caption object or returns the existing one.
        ///  </summary>
        ///  <returns>A caption element.</returns>
        public virtual System.Threading.Tasks.Task<HtmlTableCaptionElement> CreateCaptionAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlTableCaptionElement>("(element) => { return element.createCaption(); }");
        }
        
        ///  <summary>
        ///  Deletes the table caption, if one exists.
        ///  </summary>
        public virtual System.Threading.Tasks.Task DeleteCaptionAsync()
        {
            return this.EvaluateFunctionInternalAsync("(element) => { return element.deleteCaption(); }");
        }
        
        ///  <summary>
        ///  Creates a new table header section or returns the existing one.
        ///  </summary>
        ///  <returns>A table header element.</returns>
        public virtual System.Threading.Tasks.Task<HtmlTableSectionElement> CreateTHeadAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlTableSectionElement>("(element) => { return element.createTHead(); }");
        }
        
        ///  <summary>
        ///  Deletes the header from the table, if one exists.
        ///  </summary>
        public virtual System.Threading.Tasks.Task DeleteTHeadAsync()
        {
            return this.EvaluateFunctionInternalAsync("(element) => { return element.deleteTHead(); }");
        }
        
        ///  <summary>
        ///  Creates a table footer section or returns an existing one.
        ///  </summary>
        ///  <returns>A footer element.</returns>
        public virtual System.Threading.Tasks.Task<HtmlTableSectionElement> CreateTFootAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlTableSectionElement>("(element) => { return element.createTFoot(); }");
        }
        
        ///  <summary>
        ///  Deletes the footer from the table, if one exists.
        ///  </summary>
        public virtual System.Threading.Tasks.Task DeleteTFootAsync()
        {
            return this.EvaluateFunctionInternalAsync("(element) => { return element.deleteTFoot(); }");
        }
        
        ///  <summary>
        ///  Creates a new table body section.
        ///  </summary>
        ///  <returns>A body element.</returns>
        public virtual System.Threading.Tasks.Task<HtmlTableSectionElement> CreateTBodyAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlTableSectionElement>("(element) => { return element.createTBody(); }");
        }
        
        ///  <summary>
        ///  Inserts a new empty row in the table. The new row is inserted immediately before
        ///  and in the same section as the current indexth row in the table. If index is -1
        ///  or equal to the number of rows, the new row is appended. In addition, when the
        ///  table is empty the row is inserted into a TBODY which is created and inserted
        ///  into the table.
        ///  </summary>
        ///  <param name="index">
        ///  The row number where to insert a new row. This index starts from 0 and is relative
        ///  to the logical order (not document order) of all the rows contained inside the table.
        ///  </param>
        ///  <returns>The inserted table row.</returns>
        public virtual System.Threading.Tasks.Task<HtmlTableRowElement> InsertRowAsync(Int32 index)
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlTableRowElement>("(element, index) => { return element.insertRow(index); }", index);
        }
        
        ///  <summary>
        ///  Deletes a table row.
        ///  </summary>
        ///  <param name="index">
        ///  The index of the row to be deleted. This index starts from 0 and is relative to the
        ///  logical order (not document order) of all the rows contained inside the table. If the
        ///  index is -1 the last row in the table is deleted.
        ///  </param>
        public virtual System.Threading.Tasks.Task DeleteRowAsync(Int32 index)
        {
            return this.EvaluateFunctionInternalAsync("(element, index) => { return element.deleteRow(index); }", index);
        }
        
        ///  <summary>
        ///  Gets the assigned caption element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<HtmlTableCaptionElement?> GetCaptionAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlTableCaptionElement?>("(element) => { return element.caption; }");
        }
        
        ///  <summary>
        ///  Sets the assigned caption element.
        ///  </summary>
        public virtual Task SetCaptionAsync(HtmlTableCaptionElement? caption)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.caption = val; }", caption);
        }
        
        ///  <summary>
        ///  Gets the assigned head section.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<HtmlTableSectionElement?> GetHeadAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlTableSectionElement?>("(element) => { return element.tHead; }");
        }
        
        ///  <summary>
        ///  Sets the assigned head section.
        ///  </summary>
        public virtual Task SetTHeadAsync(HtmlTableSectionElement? tHead)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.tHead = val; }", tHead);
        }
        
        ///  <summary>
        ///  Gets the assigned foot section.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<HtmlTableSectionElement?> GetFootAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlTableSectionElement?>("(element) => { return element.tFoot; }");
        }
        
        ///  <summary>
        ///  Sets the assigned foot section.
        ///  </summary>
        public virtual Task SetTFootAsync(HtmlTableSectionElement? tFoot)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.tFoot = val; }", tFoot);
        }
        
        ///  <summary>
        ///  Gets the assigned body sections.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<HtmlCollection<HtmlTableSectionElement>> GetBodiesAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlCollection<HtmlTableSectionElement>>("(element) => { return element.tBodies; }");
        }
        
        ///  <summary>
        ///  Gets the assigned table rows.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<HtmlCollection<HtmlTableRowElement>> GetRowsAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlCollection<HtmlTableRowElement>>("(element) => { return element.rows; }");
        }
        
        ///  <summary>
        ///  Gets the border attribute.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<UInt32> GetBorderAsync()
        {
            return this.EvaluateFunctionInternalAsync<UInt32>("(element) => { return element.border; }");
        }
        
        ///  <summary>
        ///  Sets the border attribute.
        ///  </summary>
        public virtual Task SetBorderAsync(UInt32 border)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.border = val; }", border);
        }
    }
    
    ///  <summary>
    ///  Represents the tr HTML element.
    ///  </summary>
    public partial class HtmlTableRowElement : HtmlElement
    {
        
        ///  <summary>
        ///  Insert an empty TD or TH cell into this row. If index is -1 or equal to
        ///  the number of cells, the new cell is appended.
        ///  </summary>
        ///  <param name="index">
        ///  [Optional] The place to insert the cell, starting from 0. A negative
        ///  value indicates that the cell should be appended to the row.
        ///  </param>
        ///  <param name="tableCellKind">
        ///  [Optional] The kind of table cell to insert.
        ///  </param>
        ///  <returns>The inserted table cell.</returns>
        public virtual System.Threading.Tasks.Task<HtmlTableCellElement> InsertCellAsync(Int32 index, TableCellKind tableCellKind)
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlTableCellElement>("(element, index, tableCellKind) => { return element.insertCell(index, tableCellKi" +
                    "nd); }", index, tableCellKind);
        }
        
        ///  <summary>
        ///  Deletes a cell from the current row.
        ///  </summary>
        ///  <param name="index">
        ///  The index of the cell to delete, starting from 0. If the index is
        ///  -1 the last cell in the row is deleted.
        ///  </param>
        ///  <returns>The current row.</returns>
        public virtual System.Threading.Tasks.Task DeleteCellAsync(Int32 index)
        {
            return this.EvaluateFunctionInternalAsync("(element, index) => { return element.deleteCell(index); }", index);
        }
        
        ///  <summary>
        ///  Gets the index in the logical order and not in document order.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Int32> GetIndexAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32>("(element) => { return element.rowIndex; }");
        }
        
        ///  <summary>
        ///  Gets the index of this row, relative to the current section starting
        ///  from 0.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Int32> GetIndexInSectionAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32>("(element) => { return element.sectionRowIndex; }");
        }
        
        ///  <summary>
        ///  Gets the assigned table cells.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<HtmlCollection<HtmlTableCellElement>> GetCellsAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlCollection<HtmlTableCellElement>>("(element) => { return element.cells; }");
        }
    }
    
    ///  <summary>
    ///  Represent the base of table section (tbody, thead, tfoot) elements.
    ///  </summary>
    public partial class HtmlTableSectionElement : HtmlElement
    {
        
        ///  <summary>
        ///  Inserts a row into this section. The new row is inserted immediately before the
        ///  current indexth row in this section. If index is -1 or equal to the number of
        ///  rows in this section, the new row is appended.
        ///  </summary>
        ///  <param name="index">
        ///  The row number where to insert a new row. This index starts from 0 and is relative
        ///  only to the rows contained inside this section, not all the rows in the table.
        ///  </param>
        ///  <returns>The inserted table row.</returns>
        public virtual System.Threading.Tasks.Task<HtmlTableRowElement> InsertRowAsync(Int32 index)
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlTableRowElement>("(element, index) => { return element.insertRow(index); }", index);
        }
        
        ///  <summary>
        ///  Deletes a row from this section.
        ///  </summary>
        ///  <param name="index">
        ///  The index of the row to be deleted, or -1 to delete the last row.
        ///  This index starts from 0 and is relative only to the rows contained
        ///  inside this section, not all the rows in the table.
        ///  </param>
        public virtual System.Threading.Tasks.Task DeleteRowAsync(Int32 index)
        {
            return this.EvaluateFunctionInternalAsync("(element, index) => { return element.deleteRow(index); }", index);
        }
        
        ///  <summary>
        ///  Gets the assigned table rows.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<HtmlCollection<HtmlTableRowElement>> GetRowsAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlCollection<HtmlTableRowElement>>("(element) => { return element.rows; }");
        }
    }
    
    ///  <summary>
    ///  Represents the template HTML element.
    ///  </summary>
    public partial class HtmlTemplateElement : HtmlElement
    {
        
        ///  <summary>
        ///  Gets the template's content for cloning.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<DocumentFragment> GetContentAsync()
        {
            return this.EvaluateFunctionInternalAsync<DocumentFragment>("(element) => { return element.content; }");
        }
    }
    
    ///  <summary>
    ///  Represents the textarea HTML element.
    ///  </summary>
    public partial class HtmlTextAreaElement : HtmlElement
    {
        
        ///  <summary>
        ///  Selects the contents of the textarea.
        ///  </summary>
        public virtual System.Threading.Tasks.Task SelectAsync()
        {
            return this.EvaluateFunctionInternalAsync("(element) => { return element.select(); }");
        }
        
        ///  <summary>
        ///  Selects a range of text, and sets selectionStart and selectionEnd.
        ///  If either argument is greater than the length of the value, it is treated
        ///  as pointing to the end of the value. If end is less than start, then
        ///  both are treated as the value of end.
        ///  </summary>
        ///  <param name="selectionStart">The start of the selection.</param>
        ///  <param name="selectionEnd">The end of the selection.</param>
        ///  <param name="selectionDirection">Optional: The direction of the selection.</param>
        public virtual System.Threading.Tasks.Task SetSelectionRangeAsync(Int32 selectionStart, Int32 selectionEnd, String selectionDirection)
        {
            return this.EvaluateFunctionInternalAsync("(element, selectionStart, selectionEnd, selectionDirection) => { return element.s" +
                    "etSelectionRange(selectionStart, selectionEnd, selectionDirection); }", selectionStart, selectionEnd, selectionDirection);
        }
        
        ///  <summary>
        ///  Checks the validity of the current element.
        ///  </summary>
        ///  <returns>True if the object is valid, otherwise false.</returns>
        public virtual System.Threading.Tasks.Task<Boolean> CheckValidityAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.checkValidity(); }");
        }
        
        ///  <summary>
        ///  Sets a custom validation error. If this is not the empty string,
        ///  then the element is suffering from a custom validation error.
        ///  </summary>
        ///  <param name="error">The error message to use.</param>
        public virtual System.Threading.Tasks.Task SetCustomValidityAsync(String error)
        {
            return this.EvaluateFunctionInternalAsync("(element, error) => { return element.setCustomValidity(error); }", error);
        }
        
        ///  <summary>
        ///  Gets the autofocus HTML attribute, which indicates whether the
        ///  control should have input focus when the page loads.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetAutofocusAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.autofocus; }");
        }
        
        ///  <summary>
        ///  Sets the autofocus HTML attribute, which indicates whether the
        ///  control should have input focus when the page loads.
        ///  </summary>
        public virtual Task SetAutofocusAsync(Boolean autofocus)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.autofocus = val; }", autofocus);
        }
        
        ///  <summary>
        ///  Gets if the textarea is enabled or disabled.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetDisabledAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.disabled; }");
        }
        
        ///  <summary>
        ///  Sets if the textarea is enabled or disabled.
        ///  </summary>
        public virtual Task SetDisabledAsync(Boolean disabled)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.disabled = val; }", disabled);
        }
        
        ///  <summary>
        ///  Gets the associated HTML form element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<HtmlFormElement?> GetFormAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<HtmlFormElement?>("(element) => { return element.form; }");
        }
        
        ///  <summary>
        ///  Gets the list of assigned labels.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<NodeList> GetLabelsAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<NodeList>("(element) => { return element.labels; }");
        }
        
        ///  <summary>
        ///  Gets the name of the element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetNameAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.name; }");
        }
        
        ///  <summary>
        ///  Sets the name of the element.
        ///  </summary>
        public virtual Task SetNameAsync(String? name)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.name = val; }", name);
        }
        
        ///  <summary>
        ///  Gets the type (textarea).
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetTypeAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.type; }");
        }
        
        ///  <summary>
        ///  Gets if the field is required.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetRequiredAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.required; }");
        }
        
        ///  <summary>
        ///  Sets if the field is required.
        ///  </summary>
        public virtual Task SetRequiredAsync(Boolean required)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.required = val; }", required);
        }
        
        ///  <summary>
        ///  Gets if the field is read-only.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetReadOnlyAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.readOnly; }");
        }
        
        ///  <summary>
        ///  Sets if the field is read-only.
        ///  </summary>
        public virtual Task SetReadOnlyAsync(Boolean readOnly)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.readOnly = val; }", readOnly);
        }
        
        ///  <summary>
        ///  Gets the default value.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetDefaultValueAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.defaultValue; }");
        }
        
        ///  <summary>
        ///  Sets the default value.
        ///  </summary>
        public virtual Task SetDefaultValueAsync(String defaultValue)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.defaultValue = val; }", defaultValue);
        }
        
        ///  <summary>
        ///  Gets the value.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetValueAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.value; }");
        }
        
        ///  <summary>
        ///  Sets the value.
        ///  </summary>
        public virtual Task SetValueAsync(String value)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.value = val; }", value);
        }
        
        ///  <summary>
        ///  Gets the wrap HTML attribute, indicating how the control wraps text.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetWrapAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.wrap; }");
        }
        
        ///  <summary>
        ///  Sets the wrap HTML attribute, indicating how the control wraps text.
        ///  </summary>
        public virtual Task SetWrapAsync(String? wrap)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.wrap = val; }", wrap);
        }
        
        ///  <summary>
        ///  Gets the codepoint length of the control's value.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Int32> GetTextLengthAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32>("(element) => { return element.textLength; }");
        }
        
        ///  <summary>
        ///  Gets the rows HTML attribute, indicating
        ///  the number of visible text lines for the control.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Int32> GetRowsAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32>("(element) => { return element.rows; }");
        }
        
        ///  <summary>
        ///  Sets the rows HTML attribute, indicating
        ///  the number of visible text lines for the control.
        ///  </summary>
        public virtual Task SetRowsAsync(Int32 rows)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.rows = val; }", rows);
        }
        
        ///  <summary>
        ///  Gets the cols HTML attribute, indicating
        ///  the visible width of the text area.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Int32> GetColumnsAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32>("(element) => { return element.cols; }");
        }
        
        ///  <summary>
        ///  Sets the cols HTML attribute, indicating
        ///  the visible width of the text area.
        ///  </summary>
        public virtual Task SetColsAsync(Int32 cols)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.cols = val; }", cols);
        }
        
        ///  <summary>
        ///  Gets the maxlength HTML attribute, indicating
        ///  the maximum number of characters the user can enter.
        ///  This constraint is evaluated only when the value changes.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Int32> GetMaxLengthAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32>("(element) => { return element.maxLength; }");
        }
        
        ///  <summary>
        ///  Sets the maxlength HTML attribute, indicating
        ///  the maximum number of characters the user can enter.
        ///  This constraint is evaluated only when the value changes.
        ///  </summary>
        public virtual Task SetMaxLengthAsync(Int32 maxLength)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.maxLength = val; }", maxLength);
        }
        
        ///  <summary>
        ///  Gets the placeholder HTML attribute, containing a hint to
        ///  the user about what to enter in the control.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetPlaceholderAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.placeholder; }");
        }
        
        ///  <summary>
        ///  Sets the placeholder HTML attribute, containing a hint to
        ///  the user about what to enter in the control.
        ///  </summary>
        public virtual Task SetPlaceholderAsync(String? placeholder)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.placeholder = val; }", placeholder);
        }
        
        ///  <summary>
        ///  Gets the direction in which selection occurred. This is "forward" if
        ///  selection was performed in the start-to-end direction of the current
        ///  locale, or "backward" for the opposite direction.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetSelectionDirectionAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.selectionDirection; }");
        }
        
        ///  <summary>
        ///  Gets the directionality of the form element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetDirectionNameAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.dirName; }");
        }
        
        ///  <summary>
        ///  Sets the directionality of the form element.
        ///  </summary>
        public virtual Task SetDirNameAsync(String? dirName)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.dirName = val; }", dirName);
        }
        
        ///  <summary>
        ///  Gets the index of the beginning of selected text.
        ///  If no text is selected, contains the index of the character
        ///  that follows the input cursor. On being set, the control behaves
        ///  as if setSelectionRange() had been called with this as the first
        ///  argument, and selectionEnd as the second argument.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Int32> GetSelectionStartAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32>("(element) => { return element.selectionStart; }");
        }
        
        ///  <summary>
        ///  Sets the index of the beginning of selected text.
        ///  If no text is selected, contains the index of the character
        ///  that follows the input cursor. On being set, the control behaves
        ///  as if setSelectionRange() had been called with this as the first
        ///  argument, and selectionEnd as the second argument.
        ///  </summary>
        public virtual Task SetSelectionStartAsync(Int32 selectionStart)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.selectionStart = val; }", selectionStart);
        }
        
        ///  <summary>
        ///  Gets the index of the end of selected text. If no text
        ///  is selected, contains the index of the character that follows
        ///  the input cursor. On being set, the control behaves as if
        ///  setSelectionRange() had been called with this as the second
        ///  argument, and selectionStart as the first argument.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Int32> GetSelectionEndAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32>("(element) => { return element.selectionEnd; }");
        }
        
        ///  <summary>
        ///  Sets the index of the end of selected text. If no text
        ///  is selected, contains the index of the character that follows
        ///  the input cursor. On being set, the control behaves as if
        ///  setSelectionRange() had been called with this as the second
        ///  argument, and selectionStart as the first argument.
        ///  </summary>
        public virtual Task SetSelectionEndAsync(Int32 selectionEnd)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.selectionEnd = val; }", selectionEnd);
        }
        
        ///  <summary>
        ///  Gets a value if the current element validates.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetWillValidateAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.willValidate; }");
        }
        
        ///  <summary>
        ///  Gets the current validation state of the current element.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<ValidityState> GetValidityAsync()
        {
            return this.EvaluateFunctionHandleInternalAsync<ValidityState>("(element) => { return element.validity; }");
        }
        
        ///  <summary>
        ///  Gets the current validation message.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetValidationMessageAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.validationMessage; }");
        }
    }
    
    ///  <summary>
    ///  Represents the time HTML element.
    ///  </summary>
    public partial class HtmlTimeElement : HtmlElement
    {
        
        ///  <summary>
        ///  Gets the time.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String?> GetDateTimeAsync()
        {
            return this.EvaluateFunctionInternalAsync<String?>("(element) => { return element.datetime; }");
        }
        
        ///  <summary>
        ///  Sets the time.
        ///  </summary>
        public virtual Task SetDatetimeAsync(String? datetime)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.datetime = val; }", datetime);
        }
    }
    
    ///  <summary>
    ///  Represents the title HTML element.
    ///  </summary>
    public partial class HtmlTitleElement : HtmlElement
    {
        
        ///  <summary>
        ///  Gets the text of the title.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetTextAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.text; }");
        }
        
        ///  <summary>
        ///  Sets the text of the title.
        ///  </summary>
        public virtual Task SetTextAsync(String text)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.text = val; }", text);
        }
    }
    
    ///  <summary>
    ///  Represents an unknown HTML element.
    ///  </summary>
    public partial class HtmlUnknownElement : HtmlElement
    {
    }
    
    ///  <summary>
    ///  Represents an ul HTML element.
    ///  </summary>
    public partial class HtmlUnorderedListElement : HtmlElement
    {
    }
    
    ///  <summary>
    ///  The ValidityState interface represents the validity states that an element
    ///  can be in, with respect to constraint validation. Together, they help explain
    ///  why an element's value fails to validate, if it's not valid.
    ///  </summary>
    public partial class ValidityState : RemoteHandle
    {
        
        ///  <summary>
        ///  Gets if the element has a required attribute, but no value.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetIsValueMissingAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.valueMissing; }");
        }
        
        ///  <summary>
        ///  Gets if the value is not in the required syntax (when type is email or url).
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetIsTypeMismatchAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.typeMismatch; }");
        }
        
        ///  <summary>
        ///  Gets if the value does not match the specified pattern.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetIsPatternMismatchAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.patternMismatch; }");
        }
        
        ///  <summary>
        ///  Gets if the value exceeds the specified maxlength.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetIsTooLongAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.tooLong; }");
        }
        
        ///  <summary>
        ///  Gets if the value is below the specified minlength.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetIsTooShortAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.tooShort; }");
        }
        
        ///  <summary>
        ///  Gets if the value is regarded is invalid input.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetIsBadInputAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.badInput; }");
        }
        
        ///  <summary>
        ///  Gets if the value is less than the minimum specified by the min attribute.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetIsRangeUnderflowAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.rangeUnderflow; }");
        }
        
        ///  <summary>
        ///  Gets if the value is greater than the maximum specified by the max attribute.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetIsRangeOverflowAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.rangeOverflow; }");
        }
        
        ///  <summary>
        ///  Gets if the value does not fit the rules determined by the step attribute
        ///  (that is, it's not evenly divisible by the step value).
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetIsStepMismatchAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.stepMismatch; }");
        }
        
        ///  <summary>
        ///  Gets the element's custom validity message.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetIsCustomErrorAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.customError; }");
        }
        
        ///  <summary>
        ///  Gets if the element meets all constraint validations, and is therefore
        ///  considered to be valid.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Boolean> GetIsValidAsync()
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element) => { return element.valid; }");
        }
    }
    
    ///  <summary>
    ///  A collection of media queries.
    ///  </summary>
    public partial class MediaList : RemoteHandle
    {
        
        ///  <summary>
        ///  Adds the medium to the end of the list. If the medium is already used,
        ///  it is first removed.
        ///  </summary>
        ///  <param name="medium">The new medium to add.</param>
        public virtual System.Threading.Tasks.Task AppendMediumAsync(String medium)
        {
            return this.EvaluateFunctionInternalAsync("(element, medium) => { return element.appendMedium(medium); }", medium);
        }
        
        ///  <summary>
        ///  Deletes the medium indicated from the list of media queries.
        ///  </summary>
        ///  <param name="medium">The medium to delete from the list.</param>
        public virtual System.Threading.Tasks.Task RemoveMediumAsync(String medium)
        {
            return this.EvaluateFunctionInternalAsync("(element, medium) => { return element.removeMedium(medium); }", medium);
        }
        
        ///  <summary>
        ///  Gets the parsable textual representation of the media list.
        ///  This is a comma-separated list of media.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetMediaTextAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.mediaText; }");
        }
        
        ///  <summary>
        ///  Sets the parsable textual representation of the media list.
        ///  This is a comma-separated list of media.
        ///  </summary>
        public virtual Task SetMediaTextAsync(String mediaText)
        {
            return this.EvaluateFunctionInternalAsync("(e, val) => { e.mediaText = val; }", mediaText);
        }
        
        ///  <summary>
        ///  Gets the number of media in the list.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Int32> GetLengthAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32>("(element) => { return element.length; }");
        }
    }
    
    ///  <summary>
    ///  Represents a list of stylesheet elements.
    ///  </summary>
    public partial class StyleSheetList : RemoteHandle
    {
        
        ///  <summary>
        ///  Gets the number of elements in the list of stylesheets.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Int32> GetLengthAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32>("(element) => { return element.length; }");
        }
    }
    
    ///  <summary>
    ///  Represents a string list.
    ///  </summary>
    public partial class StringList : RemoteHandle
    {
        
        ///  <summary>
        ///  Returns a boolean indicating if the specified entry is available.
        ///  </summary>
        ///  <param name="entry">The entry that will be looked for.</param>
        ///  <returns>
        ///  True if the element is available, otherwise false.
        ///  </returns>
        public virtual System.Threading.Tasks.Task<Boolean> ContainsAsync(String entry)
        {
            return this.EvaluateFunctionInternalAsync<Boolean>("(element, entry) => { return element.contains(entry); }", entry);
        }
        
        ///  <summary>
        ///  Gets the number of entries.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<Int32> GetLengthAsync()
        {
            return this.EvaluateFunctionInternalAsync<Int32>("(element) => { return element.length; }");
        }
    }
    
    ///  <summary>
    ///  The DocumentType interface represents a Node containing a doctype.
    ///  </summary>
    public partial class DocumentType : Node
    {
        
        ///  <summary>
        ///  Inserts nodes just before the current node.
        ///  </summary>
        ///  <param name="nodes">The nodes to insert.</param>
        public virtual System.Threading.Tasks.Task BeforeAsync(Node[] nodes)
        {
            return this.EvaluateFunctionInternalAsync("(element, nodes) => { return element.before(nodes); }", nodes);
        }
        
        ///  <summary>
        ///  Inserts nodes just after the current node.
        ///  </summary>
        ///  <param name="nodes">The nodes to insert.</param>
        public virtual System.Threading.Tasks.Task AfterAsync(Node[] nodes)
        {
            return this.EvaluateFunctionInternalAsync("(element, nodes) => { return element.after(nodes); }", nodes);
        }
        
        ///  <summary>
        ///  Replaces the current node with nodes.
        ///  </summary>
        ///  <param name="nodes">The nodes to insert.</param>
        public virtual System.Threading.Tasks.Task ReplaceAsync(Node[] nodes)
        {
            return this.EvaluateFunctionInternalAsync("(element, nodes) => { return element.replace(nodes); }", nodes);
        }
        
        ///  <summary>
        ///  Removes the current node.
        ///  </summary>
        public virtual System.Threading.Tasks.Task RemoveAsync()
        {
            return this.EvaluateFunctionInternalAsync("(element) => { return element.remove(); }");
        }
        
        ///  <summary>
        ///  Gets the name of the document type.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetNameAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.name; }");
        }
        
        ///  <summary>
        ///  Gets the public ID of the document type.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetPublicIdentifierAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.publicId; }");
        }
        
        ///  <summary>
        ///  Gets the system ID of the document type.
        ///  </summary>
        public virtual System.Threading.Tasks.Task<String> GetSystemIdentifierAsync()
        {
            return this.EvaluateFunctionInternalAsync<String>("(element) => { return element.systemId; }");
        }
    }
}
